
/* 
THE STORE PROCEDURE Backlog_Amount_SP_PO WILL COMPLETE THE FOLLOWING TASKS:
1. CREATE A TEMPORARY TABLE #Snapshot_Message TO PERFORM THE CALCULATION OF BACKLOG_AMOUNT & REVENUE_AMOUNT FOR A ORDER_NO (Task1)
2. COPY TEMPORARY TABLE #Snapshot_Message WITH ONLY THE MINIMUM FIELDS AND ROWS TO A NEW TEMPORARY TABLE - #Esc_Customer_Order_Line_Bookings (Task2)
3. REMOVE REDUNDANT ROWS AND COMBINE ROWS IN #Esc_Customer_Order_Line_Bookings AND THE FINAL ROWS IS THE ONES WHICH WILL BE INSERTED TO INTERMEDIATE TABLE IFSAppl_INTERMED_CUSTOMER_ORDER_LINE_BOOKINGS_TEST (Task3)

*/
/***********************************************************************************************/
/***********************************************************************************************/
/***********************************************************************************************/
/* Beginning of Backlog_Amount_SP_PO */

/* Beginning of Backlog_Amount_SP_PO */
CREATE PROCEDURE [dbo].[Backlog_Amount_SP_PO] (@PO NVARCHAR(20))
AS     
BEGIN



     /*    Task1: CREATE A TEMPORARY TABLE #Snapshot_Message TO PERFORM THE CALCULATION OF BACKLOG_AMOUNT & REVENUE_AMOUNT FOR A LINE */
				 /*                                                   */
                 /*  A. Create Temporary table #Snapshot_Message and copy data from History tables and Sanpshot table to #Snapshot_Message */
				 /*                                                   */
/* COLUMN OF 'INSERT_FOR_REVERSAL' USED FOR ACTION OF 'ANALYZE_REVERSAL', VALUE OF 0 INDICATES THIS RECORD IS ORIGINALLY FROM SNAPSHOT TABLE, AND VALUE OF 1 INDICATES THIS RECORD IS ADDED FOR REVERSAL PURPOSE.
   THE COLUMN OF 'INSERT_FOR_REVERSAL' WILL ALSO TO BE USED TO IDENTIFY THE TABLE OF ORIGIAL HISTORY TABLES AND SNAPSHOT TABLE WHEN UPDATE THEM WITH PROCESS FLAGS*/
/*IN THE NEW CREATED TABLE #Snapshot_Message,PRE_XXX MEANS THE PROIOR DATA FOR THE SAME COLUMN, AND PPRE_XXX MEANS THE TWO ROWS AHEAD OF THIS DATA FOR THE SAME COLUMN*/

IF OBJECT_ID('tempdb..#Snapshot_Message') IS NOT NULL                  
    begin
            drop table #Snapshot_Message
    end

/******************************************/
CREATE TABLE #Snapshot_Message
(
DATA_SOURCE nvarchar(10), OBJVERSION nvarchar (2000), HISTORY_NO BIGINT, PRE_HISTORY_NO BIGINT
,ORDER_NO nvarchar(12),  SITE_LOCAL_DATETIME datetime,PRE_SITE_LOCAL_DATETIME datetime,NEXT_SITE_LOCAL_DATETIME datetime, BOOKING_DATE date, LINE_NO nvarchar(4) , REL_NO nvarchar(4), LINE_ITEM_NO numeric(38,4),  SALESMAN_CODE nvarchar(20),PRE_SALESMAN_CODE nvarchar(20), MARKET_CODE nvarchar(10), PRE_MARKET_CODE nvarchar(10),REGION_CODE nvarchar(10), PRE_REGION_CODE nvarchar(10)
,DISTRICT_CODE nvarchar(10), PRE_DISTRICT_CODE nvarchar(10), PLANNED_DELIVERY_DATE DATETIME , PRE_PLANNED_DELIVERY_DATE DATETIME ,  BUY_QTY_DUE numeric(38,4), PRE_BUY_QTY_DUE numeric(38,4),
QTY_INVOICED numeric(38,4), PRE_QTY_INVOICED numeric(38,4), PPRE_QTY_INVOICED numeric(38,4),OBJSTATE nvarchar(20), PRE_OBJSTATE nvarchar(20),LINE_OBJSTATE nvarchar(20),PRE_LINE_OBJSTATE nvarchar(20)
, NET_AMOUNT_BASE numeric(38,4), PRE_NET_AMOUNT_BASE numeric(38,4),LINE_HISTORY_ORDER INT, ORDER_STATE nvarchar(20), PRE_ORDER_STATE nvarchar(20),LINE_STATE nvarchar(20),PRE_LINE_STATE nvarchar(20),WAS_ORDER_PLANNED nvarchar(1),
 INSERT_FOR_REVERSAL BIT ,BACKLOG_AMOUNT numeric(38,4),REVENUE_AMOUNT numeric(38,4)
)


/*    copy data from History tables and Sanpshot table to #Snapshot_Message     */

INSERT INTO #Snapshot_Message
SELECT 
            S.DATA_SOURCE
			,S.OBJVERSION
			,S.HISTORY_NO
			,LAG(S.HISTORY_NO,1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION, S.HISTORY_NO)  AS PREVIOUS_HISTORY_NO
			,S.ORDER_NO
			,S.SITE_LOCAL_DATETIME
			,CAST(LAG(S.SITE_LOCAL_DATETIME,1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION, S.HISTORY_NO) AS DATETIME) AS PRE_SITE_LOCAL_DATETIME
			,CAST(LEAD(S.SITE_LOCAL_DATETIME,1,DATEADD(d,1,GETDATE())) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION, S.HISTORY_NO) AS DATETIME) AS NEXT_SITE_LOCAL_DATETIME
			,CONVERT(DATE,S.SITE_LOCAL_DATETIME)
			,S.LINE_NO
			,S.REL_NO
			,S.LINE_ITEM_NO
			,ISNULL(S.SALESMAN_CODE,-1)  /* THE COLUMN OF SALESMEN_CODE/MARKET_CODE/REGION_CODE/DISTRICT_CODE WILL BE -1 IF IT IS NULL*/
			,CAST(LAG(ISNULL(S.SALESMAN_CODE,-1),1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS NVARCHAR(20)) AS PREVIOUS_SALESMAN_CODE
			,ISNULL(S.MARKET_CODE,-1)
			,CAST(LAG(ISNULL(S.MARKET_CODE,-1),1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS NVARCHAR(10)) AS PREVIOUS_MARKET_CODE
			,ISNULL(S.REGION_CODE,-1)
			,CAST(LAG(ISNULL(S.REGION_CODE,-1),1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS NVARCHAR(10)) AS PREVIOUS_REGION_CODE
			,ISNULL(S.DISTRICT_CODE,-1)
			,CAST(LAG(ISNULL(S.DISTRICT_CODE,-1),1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS NVARCHAR(10)) AS PREVIOUS_DISTRICT_CODE
			,S.PLANNED_DELIVERY_DATE  /* THE COLUMN OF PLANNED_DELIVERY_DATE WILL BE DATEADD(YEAR,-1,GETDATE()) IF IT IS NULL*/
			,CAST(LAG(ISNULL(S.PLANNED_DELIVERY_DATE, DATEADD(YEAR,-1,GETDATE())),1,0) OVER (PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS DATETIME)as PREVIOUS_PLANNED_DELIVERY_DATE   			 															
			,S.BUY_QTY_DUE
			,CAST(LAG(S.BUY_QTY_DUE,1,0) OVER (PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS numeric(38,4))as PREVIOUS_BUY_QTY_DUE
			,S.QTY_INVOICED    /* QTY_INVOICED IS AN ACUMULATED NUMBER, FOR PARTIALLY DELIVERY, THE ACTUALLY DELIVERED QTY=QTY_INVOICED-PRE_QTY_INVOICED */
			,CAST(LAG(S.QTY_INVOICED,1,0) OVER (PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS numeric(38,4))as PREVIOUS_QTY_INVOICED
			,CAST(LAG(S.QTY_INVOICED,2,0) OVER (PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS numeric(38,4))as P_PREVIOUS_QTY_INVOICED   /*IT IS THE ONLY 'PPRE_XXX' NEEDED IN THIS SP*/
			,S.OBJSTATE
			,CAST(LAG(S.OBJSTATE,1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS NVARCHAR(20)) AS PREVIOUS_OBJSTATE
			,S.LINE_OBJSTATE
			,CAST(LAG(S.LINE_OBJSTATE,1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS NVARCHAR(20)) AS PREVIOUS_LINE_OBJSTATE
			,S.NET_AMOUNT_BASE
			,LAG(S.NET_AMOUNT_BASE,1,0) OVER (PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) as PREVIOUS_NET_AMOUNT_BASE
			,CAST (ROW_NUMBER() OVER (PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS INT)as LINE_HISTORY_ORDER
			, CASE   
				   WHEN S.OBJSTATE IS NULL THEN CAST('Planned' AS NVARCHAR(20))                                                    
				   WHEN S.OBJSTATE='planned' THEN CAST('Planned' AS NVARCHAR(20))        
				   WHEN S.OBJSTATE='Cancelled' THEN CAST('Cancelled' AS NVARCHAR(20))
				   WHEN S.OBJSTATE='Invoiced' THEN CAST('Invoiced'AS NVARCHAR(20))
				   WHEN S.OBJSTATE='CreditBlocked'THEN CAST('CreditBlocked'AS NVARCHAR(20))
				   ELSE CAST('Backlog' AS NVARCHAR(20))
			  END AS 'ORDER_STATE'
			, '0' as PRE_ORDER_STATE   /*'0' AS DEFAULT*/
			, CASE  
				   WHEN S.OBJSTATE IS NULL THEN CAST('Planned' AS NVARCHAR(20))                                               
				   WHEN S.OBJSTATE='planned' THEN CAST('Planned' AS NVARCHAR(20))       
				   WHEN S.LINE_OBJSTATE='Cancelled' THEN CAST('Cancelled' AS NVARCHAR(20))
				   WHEN S.LINE_OBJSTATE='Invoiced' THEN CAST('Invoiced'AS NVARCHAR(20))
				   ELSE CAST('Backlog' AS NVARCHAR(20))
			  END AS 'LINE_STATE'
			, '0' AS PRE_LINE_STATE    /*'0' AS DEFAULT*/
			, 'Y' AS WAS_ORDER_PLANNED   /*'Y' IS DEFAULT- IF VALUE ='N' IT MEANS ORDER_NO NEED PREVIOUS DATA TO PROCESS CORRECTLY */

			, 0 /* O MEANS THIS RECORD ORIGINALLY FROM SNAPSHOT TABLE   */
			,-1 /* -1 AS A DEFAULT VALUE FOR BACKLOG_AMOUNT AND IT WILL BE UPDATED */
			,-1 /* -1 AS A DEFAULT VALUE FOR REVENUE_AMOUNT AND IT WILL BE UPDATED */

FROM  [dbo].[RAW_ORDER_LINE_SNAPSHOT] S
WHERE S.ORDER_NO= @PO


/* end of copy data to Temporary table #Snapshot_Message      */
/* end of A : Create Temporary table #Snapshot_Message and copy data from History tables and Sanpshot table to #Snapshot_Message     */

                   /*                                            */
                   /* B. CHECK IF THIS ORDER WAS PLANNED BEFORE  */
                   /*                                            */
/*  2/27/2020 REVISED: CHECK IF THIS ORDER WAS PLANNED BEFORE - IF THERE IS ANY OBJSTATE= 'PLANNED' IN SNAPSHOT TABLE OR THE FIRST BOOKING DATE OF SNAPSHOT TABLE = FIRST CAST(SITE_LOCAL_DAYTIME AS DATE) IN HH TABLE    
    IF WAS_ORDER_PLANNED='Y', WHICH MEANS THIS ORDER HAS COMPLETE DATA FROM BEGINNING
    IF WAS_ORDER_PLANNED='N', WHICH MEANS THIS ORDER HAS NO COMPLETE DATA, WE NEED PREVIOUS DATA. SO WE DO NOT NEED TO SPEND TIME TO PROCESS IT
*/

UPDATE  #Snapshot_Message SET WAS_ORDER_PLANNED ='N' 
WHERE 
     NOT EXISTS (
                    SELECT HISTORY_NO
                    FROM #Snapshot_Message
					WHERE ORDER_STATE = 'PLANNED'         /*WHEN OBJSTATE = 'PLANNED' OR OBJSTATE IS NULL */

                  )


	  AND                                                        -- ADDED ON 2/27/2020 : FOR CONDITION OF INCOMPLETE_DATA
	  (
			SELECT min( BOOKING_DATE)
			FROM #Snapshot_Message
			WHERE ORDER_NO=@PO 
			)
       <>
		(
			SELECT TOP 1 CAST(SITE_LOCAL_DATETIME AS DATE) 
			FROM RAW_CUSTOMER_ORDER_HISTORY
			WHERE ORDER_NO=@PO
		)



				  /* End of B. CHECK IF THIS ORDER WAS PLANNED BEFORE  */

                   /*                                                                        */
                   /* C.  UPDATE ORDER_STATE & PRE_ORDER_STATE, LINE_STATE & PRE_LINE_STATE  */
                   /*                                                                        */
/* BEGIN OF C: UPDATE ORDER_STATE & PRE_ORDER_STATE, LINE_STATE & PRE_LINE_STATE*/

/*
    REMOVE 'CREDITBLOCKED' FROM ORDER_STATE : IF ORDER HAS NOT BEEN RELEASED AND OBJSTATE='CREDITBLOCKED', WE REGARD ORDER AS 'PLANNED'
	                                          IF ORDER WAS RELEASED AND OBJSTATE='CREDITBLOCKED', WE REGARD ORDER AS 'BACKLOG'
*/
/*BEGIN OF UPDATING ORDER_STATE & PRE_ORDER_STATE*/
UPDATE #Snapshot_Message  SET PRE_ORDER_STATE=TBL.PRE_ORDER_STATE
	 FROM #Snapshot_Message SM
	 INNER JOIN 
	   (
		 SELECT ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO,HISTORY_NO,LAG(ORDER_STATE,1,0) OVER(PARTITION BY ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO ORDER BY OBJVERSION, HISTORY_NO) AS PRE_ORDER_STATE
		 FROM  #Snapshot_Message 
	   ) AS TBL
	 ON SM.ORDER_NO=TBL.ORDER_NO
		   AND SM.LINE_NO=TBL.LINE_NO
		   AND SM.REL_NO=TBL.REL_NO
		   AND SM.LINE_ITEM_NO=TBL.LINE_ITEM_NO
		   AND SM.HISTORY_NO=TBL.HISTORY_NO

WHILE EXISTS (
				  SELECT HISTORY_NO
				  FROM #Snapshot_Message
				  WHERE ORDER_STATE='CREDITBLOCKED'
			  )
BEGIN

     UPDATE #Snapshot_Message SET ORDER_STATE='Backlog'
	 WHERE OBJSTATE='CREDITBLOCKED' AND PRE_OBJSTATE='0' AND WAS_ORDER_PLANNED='Y' AND LINE_HISTORY_ORDER=1

     UPDATE #Snapshot_Message SET ORDER_STATE='Backlog'
	 WHERE OBJSTATE='CREDITBLOCKED' AND PRE_OBJSTATE='0' AND WAS_ORDER_PLANNED='N' AND LINE_OBJSTATE IN ('INVOICED','PICKED','DELIVERED','PartiallyDelivered') AND LINE_HISTORY_ORDER=1    

	 UPDATE #Snapshot_Message SET ORDER_STATE='0'
	 WHERE OBJSTATE='CREDITBLOCKED' AND PRE_OBJSTATE='0' AND WAS_ORDER_PLANNED='N' AND LINE_OBJSTATE NOT IN ('INVOICED','PICKED','DELIVERED','PartiallyDelivered')  AND LINE_HISTORY_ORDER=1   
    
	 UPDATE #Snapshot_Message SET ORDER_STATE='Planned'
	 WHERE OBJSTATE='CREDITBLOCKED' AND PRE_OBJSTATE='PLANNED'

	 UPDATE #Snapshot_Message SET ORDER_STATE='Planned'
	 WHERE OBJSTATE='CREDITBLOCKED' AND PRE_ORDER_STATE='PLANNED'

	 UPDATE #Snapshot_Message SET ORDER_STATE='Backlog'
	 WHERE OBJSTATE ='CREDITBLOCKED' AND PRE_ORDER_STATE='BACKLOG'  

	 UPDATE #Snapshot_Message SET ORDER_STATE='Backlog'
	 WHERE OBJSTATE NOT IN ('PLANNED','CANCELLED', 'INVOICED','CREDITBLOCKED')  AND PRE_OBJSTATE='CREDITBLOCKED' AND PRE_ORDER_STATE='PLANNED'  

	 UPDATE #Snapshot_Message  SET PRE_ORDER_STATE=TBL.PRE_PO_STATE
	 FROM #Snapshot_Message SM
	 INNER JOIN 
	   (
		 SELECT ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO,HISTORY_NO,LAG(ORDER_STATE,1,0) OVER(PARTITION BY ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO ORDER BY OBJVERSION, HISTORY_NO) AS PRE_PO_STATE
		 FROM  #Snapshot_Message 
	   ) AS TBL
	 ON SM.ORDER_NO=TBL.ORDER_NO
		   AND SM.LINE_NO=TBL.LINE_NO
		   AND SM.REL_NO=TBL.REL_NO
		   AND SM.LINE_ITEM_NO=TBL.LINE_ITEM_NO
		   AND SM.HISTORY_NO=TBL.HISTORY_NO

END
/*END OF UPDATING ORDER_STATE & PRE_ORDER_STATE*/


/*BEGIN OF UPDATING LINE_STATE & PRE_LINE_STATE*/
UPDATE #Snapshot_Message SET LINE_STATE='Planned'          /*AS LONG AS THE ORDER IS NOT RELEASED, THE LINE IS REGARDED AS 'PLANNED'*/
WHERE ORDER_STATE='Planned'


UPDATE #Snapshot_Message SET LINE_STATE='Cancelled_Att'       /*12-11-2019 added as SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED and line_no is cancelled at the same time */
WHERE NET_AMOUNT_BASE=PRE_NET_AMOUNT_BASE
      AND ORDER_STATE NOT IN ('PLANNED','INVOICED') 
      AND PRE_ORDER_STATE NOT IN ('0','PLANNED','CANCELLED'  ) 
	  AND PRE_LINE_OBJSTATE NOT IN ('CANCELLED','PLANNED','INVOICED' ) 
	  AND LINE_OBJSTATE='CANCELLED'
	  AND (SALESMAN_CODE<>PRE_SALESMAN_CODE OR MARKET_CODE<>PRE_MARKET_CODE OR REGION_CODE <> PRE_REGION_CODE OR DISTRICT_CODE <> PRE_DISTRICT_CODE OR PLANNED_DELIVERY_DATE<>PRE_PLANNED_DELIVERY_DATE)
      AND QTY_INVOICED=PRE_QTY_INVOICED

UPDATE #Snapshot_Message SET LINE_STATE='Cancelled_A_N'       /*12-11-2019 added as SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED, NET_AMOUNT-BASE CHANGED and line_no is cancelled at the same time */
WHERE NET_AMOUNT_BASE<>PRE_NET_AMOUNT_BASE
      AND ORDER_STATE NOT IN ('PLANNED','INVOICED') 
      AND PRE_ORDER_STATE NOT IN ('0','PLANNED','CANCELLED') 
	  AND PRE_LINE_OBJSTATE NOT IN ('CANCELLED','PLANNED','INVOICED' ) 
	  AND LINE_OBJSTATE='CANCELLED'
	  AND (SALESMAN_CODE<>PRE_SALESMAN_CODE OR MARKET_CODE<>PRE_MARKET_CODE OR REGION_CODE <> PRE_REGION_CODE OR DISTRICT_CODE <> PRE_DISTRICT_CODE OR PLANNED_DELIVERY_DATE<>PRE_PLANNED_DELIVERY_DATE)
      AND QTY_INVOICED=PRE_QTY_INVOICED


UPDATE #Snapshot_Message SET LINE_STATE='Nb_Changed'       /*NET_BASE_AMOUNT CHANGED*/
WHERE NET_AMOUNT_BASE<>PRE_NET_AMOUNT_BASE
      AND ORDER_STATE IN ('BACKLOG', 'INVOICED') 
      AND PRE_OBJSTATE<>'0'      
	  AND LINE_OBJSTATE<>'CANCELLED'
	  AND (SALESMAN_CODE=PRE_SALESMAN_CODE AND MARKET_CODE=PRE_MARKET_CODE AND REGION_CODE=PRE_REGION_CODE AND DISTRICT_CODE= PRE_DISTRICT_CODE AND PLANNED_DELIVERY_DATE=PRE_PLANNED_DELIVERY_DATE)   /*11-19-2019*/
	  AND QTY_INVOICED=PRE_QTY_INVOICED


UPDATE #Snapshot_Message SET LINE_STATE='Att_Changed'   /*SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED*/
WHERE  (SALESMAN_CODE<>PRE_SALESMAN_CODE OR MARKET_CODE<>PRE_MARKET_CODE OR REGION_CODE <> PRE_REGION_CODE OR DISTRICT_CODE <> PRE_DISTRICT_CODE OR PLANNED_DELIVERY_DATE<>PRE_PLANNED_DELIVERY_DATE)
       AND ORDER_STATE IN ('BACKLOG', 'INVOICED')
	   AND PRE_OBJSTATE<>'0'
	   AND LINE_OBJSTATE<>'CANCELLED'
       AND QTY_INVOICED=PRE_QTY_INVOICED
       AND NET_AMOUNT_BASE=PRE_NET_AMOUNT_BASE 
       

UPDATE #Snapshot_Message SET LINE_STATE='A_N_Changed'         /*NET_BASE_AMOUNT & SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED*/
WHERE  NET_AMOUNT_BASE<>PRE_NET_AMOUNT_BASE
       AND (SALESMAN_CODE<>PRE_SALESMAN_CODE OR MARKET_CODE<>PRE_MARKET_CODE OR REGION_CODE <> PRE_REGION_CODE OR DISTRICT_CODE <> PRE_DISTRICT_CODE OR PLANNED_DELIVERY_DATE<>PRE_PLANNED_DELIVERY_DATE)
	   AND ORDER_STATE IN ('BACKLOG', 'INVOICED')
       AND PRE_OBJSTATE<>'0'
	   AND LINE_OBJSTATE<>'CANCELLED'
	   AND QTY_INVOICED=PRE_QTY_INVOICED

UPDATE #Snapshot_Message SET LINE_STATE='Invoiced'       /*INVOICED*/
WHERE  QTY_INVOICED<>PRE_QTY_INVOICED 
       AND ORDER_STATE IN ('BACKLOG', 'INVOICED')
       AND PRE_OBJSTATE<>'0'
	   AND LINE_OBJSTATE<>'CANCELLED'
       AND NET_AMOUNT_BASE=PRE_NET_AMOUNT_BASE
	   AND (SALESMAN_CODE=PRE_SALESMAN_CODE AND MARKET_CODE=PRE_MARKET_CODE AND REGION_CODE=PRE_REGION_CODE AND DISTRICT_CODE= PRE_DISTRICT_CODE AND PLANNED_DELIVERY_DATE=PRE_PLANNED_DELIVERY_DATE) 

UPDATE #Snapshot_Message SET LINE_STATE='Invoiced_Nb_Changed'       /*INVOICED & NET_BASE_AMOUNT CHANGE AT THE SAME TIME*/
WHERE  QTY_INVOICED<>PRE_QTY_INVOICED 
       AND NET_AMOUNT_BASE<>PRE_NET_AMOUNT_BASE
       AND ORDER_STATE IN ('BACKLOG', 'INVOICED')
       AND PRE_OBJSTATE<>'0'
	   AND LINE_OBJSTATE<>'CANCELLED'
	   AND (SALESMAN_CODE=PRE_SALESMAN_CODE AND MARKET_CODE=PRE_MARKET_CODE AND REGION_CODE=PRE_REGION_CODE AND DISTRICT_CODE= PRE_DISTRICT_CODE AND PLANNED_DELIVERY_DATE=PRE_PLANNED_DELIVERY_DATE) 

UPDATE #Snapshot_Message SET LINE_STATE='Invoiced_Att_Changed'       /*INVOICED & SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED AT THE SAME TIME*/
WHERE  QTY_INVOICED<>PRE_QTY_INVOICED
       AND (SALESMAN_CODE<>PRE_SALESMAN_CODE OR MARKET_CODE<>PRE_MARKET_CODE OR REGION_CODE <> PRE_REGION_CODE OR DISTRICT_CODE <> PRE_DISTRICT_CODE OR PLANNED_DELIVERY_DATE<>PRE_PLANNED_DELIVERY_DATE)
       AND ORDER_STATE IN ('BACKLOG', 'INVOICED')
       AND PRE_OBJSTATE<>'0'
	   AND LINE_OBJSTATE<>'CANCELLED'
	   AND NET_AMOUNT_BASE=PRE_NET_AMOUNT_BASE

UPDATE #Snapshot_Message SET LINE_STATE='Invoiced_A_N_Changed'       /*INVOICED,NET_BASE_AMOUNT & SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED AT THE SAME TIME*/
WHERE  QTY_INVOICED<>PRE_QTY_INVOICED 
       AND NET_AMOUNT_BASE<>PRE_NET_AMOUNT_BASE
	   AND (SALESMAN_CODE<>PRE_SALESMAN_CODE OR MARKET_CODE<>PRE_MARKET_CODE OR REGION_CODE <> PRE_REGION_CODE OR DISTRICT_CODE <> PRE_DISTRICT_CODE OR PLANNED_DELIVERY_DATE<>PRE_PLANNED_DELIVERY_DATE)
       AND ORDER_STATE IN ('BACKLOG', 'INVOICED')
       AND PRE_OBJSTATE<>'0'
	   AND LINE_OBJSTATE<>'CANCELLED'
      	   

UPDATE #Snapshot_Message  SET PRE_LINE_STATE=TBL.PRE_LINE_STATE
	 FROM #Snapshot_Message SM
	 INNER JOIN 
	   (
		 SELECT ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO,HISTORY_NO,LAG(LINE_STATE,1,0) OVER(PARTITION BY ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO ORDER BY OBJVERSION, HISTORY_NO) AS PRE_LINE_STATE
		 FROM  #Snapshot_Message 
	   ) AS TBL
	 ON   SM.ORDER_NO=TBL.ORDER_NO
		   AND SM.LINE_NO=TBL.LINE_NO
		   AND SM.REL_NO=TBL.REL_NO
		   AND SM.LINE_ITEM_NO=TBL.LINE_ITEM_NO
		   AND SM.HISTORY_NO=TBL.HISTORY_NO

/*END OF UPDATING LINE_STATE & PRE_LINE_STATE*/

/*  END OF C: UPDATE ORDER_STATE & PRE_ORDER_STATE, LINE_STATE & PRE_LINE_STATE */


                   /*                                                 */
                   /* D. Calculate Backlog_Amount and Revenue_Amount  */
                   /*                                                 */
/*CALULATION IS BASED ON THE VALUE IN COLUMN OF'LINE_STATE' */

                                     /*SITUATION OF CHANGE ON BACKLOG_AMOUNT OR REVENUE_AMOUNT*/


/*1-31-2020 REVISED: SITUATION OF WHEN ORDER IS FIRST TIME RELEASED & BACKLOG_AMOUNT RECORDED */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)* (BUY_QTY_DUE-QTY_INVOICED)          -- (NET_AMOUNT_BASE/BUY_QTY_DUE)* (BUY_QTY_DUE-(QTY_INVOICED-PRE_QTY_INVOICED))
WHERE ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='PLANNED'  AND LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED')  AND BUY_QTY_DUE<>0  /*WHEN ORDER IS RELEASED , LINE_STATE CAN BE OTHERS LIKE 'NB_CHANGE'*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0   
WHERE ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='PLANNED'  AND LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED')  AND BUY_QTY_DUE<>0   /*WHEN ORDER IS RELEASED , LINE_STATE CAN BE OTHERS LIKE 'NB_CHANGE'*/

/*1-31-2020 REVISED: */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)* (BUY_QTY_DUE-QTY_INVOICED)          -- (NET_AMOUNT_BASE/BUY_QTY_DUE)* (BUY_QTY_DUE-(QTY_INVOICED-PRE_QTY_INVOICED))
WHERE ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE ='CANCELLED' AND LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND BUY_QTY_DUE<>0 
UPDATE #Snapshot_Message SET REVENUE_AMOUNT=0 
WHERE ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE ='CANCELLED' AND LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND BUY_QTY_DUE<>0 

/*1-31-2020 REVISED: */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)* (BUY_QTY_DUE-QTY_INVOICED)           -- (NET_AMOUNT_BASE/BUY_QTY_DUE)* (BUY_QTY_DUE-(QTY_INVOICED-PRE_QTY_INVOICED)) 
WHERE ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='0'  AND WAS_ORDER_PLANNED='Y ' AND LINE_STATE  IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND BUY_QTY_DUE<>0  /*LINE IS RELEASED AFTER ORDER WAS RELEASED  */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0   
WHERE ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='0'  AND WAS_ORDER_PLANNED='Y ' AND LINE_STATE  IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND BUY_QTY_DUE<>0  /*LINE IS RELEASED AFTER ORDER WAS RELEASED  */



		/* ORDER CHANGED FROM INVOICED BACK TO RELEASED, IT IS FOR THE SAKE OF REVERSAL.   eg PO='P398933'   */
		UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(QTY_INVOICED-PRE_QTY_INVOICED)          
		WHERE PRE_ORDER_STATE ='INVOICED' AND ORDER_STATE ='BACKLOG'  AND PRE_LINE_STATE ='INVOICED' AND LINE_STATE ='BACKLOG'   AND QTY_INVOICED<=BUY_QTY_DUE AND BUY_QTY_DUE<>0    
		UPDATE #Snapshot_Message SET REVENUE_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(-(QTY_INVOICED-PRE_QTY_INVOICED))       
		WHERE PRE_ORDER_STATE ='INVOICED' AND ORDER_STATE ='BACKLOG'  AND PRE_LINE_STATE ='INVOICED' AND LINE_STATE ='BACKLOG'   AND QTY_INVOICED<=BUY_QTY_DUE AND BUY_QTY_DUE<>0    


/*SITUATION WHEN LINE IS FIRST TIME INVOICED & REVENUE_AMOUNT RECORDED  */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0        
WHERE ORDER_STATE NOT IN ('PLANNED','CANCELLED') AND PRE_ORDER_STATE='0'  AND WAS_ORDER_PLANNED='Y ' AND LINE_STATE ='INVOICED'   AND QTY_INVOICED<>PRE_QTY_INVOICED  AND QTY_INVOICED<=BUY_QTY_DUE AND BUY_QTY_DUE<>0   /*LINE IS RELEASED AFTER ORDER WAS RELEASED  */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(QTY_INVOICED-PRE_QTY_INVOICED)                   
WHERE ORDER_STATE NOT IN ('PLANNED','CANCELLED') AND PRE_ORDER_STATE='0'  AND WAS_ORDER_PLANNED='Y ' AND LINE_STATE ='INVOICED'   AND QTY_INVOICED<>PRE_QTY_INVOICED  AND QTY_INVOICED<=BUY_QTY_DUE AND BUY_QTY_DUE<>0   /*LINE IS RELEASED AFTER ORDER WAS RELEASED  */

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0      
WHERE ORDER_STATE='Invoiced'   AND PRE_ORDER_STATE='PLANNED' AND LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED') AND QTY_INVOICED<>PRE_QTY_INVOICED   AND QTY_INVOICED<=BUY_QTY_DUE   AND BUY_QTY_DUE<>0     /*ORDER IS INVOICED FROM PLANNED */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)* (QTY_INVOICED-PRE_QTY_INVOICED)                      
WHERE ORDER_STATE='Invoiced'   AND PRE_ORDER_STATE='PLANNED' AND LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED') AND QTY_INVOICED<>PRE_QTY_INVOICED   AND QTY_INVOICED<=BUY_QTY_DUE   AND BUY_QTY_DUE<>0      /*ORDER IS INVOICED FROM PLANNED */

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0      
WHERE ORDER_STATE='Backlog'   AND PRE_ORDER_STATE='PLANNED' AND LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED') AND QTY_INVOICED<>PRE_QTY_INVOICED   AND QTY_INVOICED<=BUY_QTY_DUE   AND BUY_QTY_DUE<>0      /*LINE IS INVOICED FROM PLANNED BUT ORDER IS BACKLOG */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(QTY_INVOICED-PRE_QTY_INVOICED)                       
WHERE ORDER_STATE='Backlog'   AND PRE_ORDER_STATE='PLANNED' AND LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED') AND QTY_INVOICED<>PRE_QTY_INVOICED   AND QTY_INVOICED<=BUY_QTY_DUE   AND BUY_QTY_DUE<>0      /*LINE IS INVOICED FROM PLANNED BUT ORDER IS BACKLOG */

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(-(QTY_INVOICED-PRE_QTY_INVOICED))                   
WHERE ORDER_STATE IN ('Invoiced','backlog') AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='Invoiced'   AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND QTY_INVOICED<>PRE_QTY_INVOICED    AND QTY_INVOICED<=BUY_QTY_DUE  AND BUY_QTY_DUE<>0   /*LINE IS INVOICED FROM BACKLOG AFTER ORDER WAS RELEASED*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT=(NET_AMOUNT_BASE/BUY_QTY_DUE)*(QTY_INVOICED-PRE_QTY_INVOICED)                        
WHERE ORDER_STATE IN ('Invoiced','backlog') AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='Invoiced'   AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND QTY_INVOICED<>PRE_QTY_INVOICED    AND QTY_INVOICED<=BUY_QTY_DUE   AND BUY_QTY_DUE<>0  /*LINE IS INVOICED FROM BACKLOG AFTER ORDER WAS RELEASED*/

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(-(BUY_QTY_DUE-PRE_QTY_INVOICED))                     
WHERE ORDER_STATE IN ('Invoiced','backlog') AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='Invoiced'   AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND QTY_INVOICED<>PRE_QTY_INVOICED    AND QTY_INVOICED>BUY_QTY_DUE   AND BUY_QTY_DUE<>0  /*LINE IS INVOICED FROM BACKLOG AFTER ORDER WAS RELEASED WHEN QTY_INVOICED>BUY_QTY_DUE (BUSINESS MISTAKE), eg PO='P398775'*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)* (QTY_INVOICED-PRE_QTY_INVOICED)                     
WHERE ORDER_STATE IN ('Invoiced','backlog') AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='Invoiced'   AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND QTY_INVOICED<>PRE_QTY_INVOICED    AND QTY_INVOICED>BUY_QTY_DUE   AND BUY_QTY_DUE<>0  /*LINE IS INVOICED FROM BACKLOG AFTER ORDER WAS RELEASED WHEN QTY_INVOICED>BUY_QTY_DUE (BUSINESS MISTAKE), eg PO='P398775'*/

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(-(BUY_QTY_DUE-PRE_QTY_INVOICED))                     
WHERE ORDER_STATE IN ('Invoiced','backlog') AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='Invoiced'   AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND QTY_INVOICED=PRE_QTY_INVOICED  AND NET_AMOUNT_BASE<>0  AND QTY_INVOICED<=BUY_QTY_DUE  AND BUY_QTY_DUE<>0   /*LINE IS INVOICED FROM BACKLOG AFTER ORDER WAS RELEASED WHEN QTY_INVOICED NOT CHANGED, eg PO='P395177'*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)* (QTY_INVOICED-PRE_QTY_INVOICED)                      
WHERE ORDER_STATE IN ('Invoiced','backlog') AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='Invoiced'   AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND QTY_INVOICED=PRE_QTY_INVOICED  AND NET_AMOUNT_BASE<>0  AND QTY_INVOICED<=BUY_QTY_DUE  AND BUY_QTY_DUE<>0   /*LINE IS INVOICED FROM BACKLOG AFTER ORDER WAS RELEASED WHEN QTY_INVOICED NOT CHANGED, eg PO='P395177'*/

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0      
WHERE ORDER_STATE IN ('Invoiced','backlog') AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='Invoiced'   AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED')   AND NET_AMOUNT_BASE=0  AND QTY_INVOICED<=BUY_QTY_DUE    /*LINE IS INVOICED FROM BACKLOG AFTER ORDER WAS RELEASED WHEN NET_AMOUNT_BASE=0 */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0     
WHERE ORDER_STATE IN ('Invoiced','backlog') AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='Invoiced'   AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED')   AND NET_AMOUNT_BASE=0  AND QTY_INVOICED<=BUY_QTY_DUE    /*LINE IS INVOICED FROM BACKLOG AFTER ORDER WAS RELEASED WHEN NET_AMOUNT_BASE=0  */


/*SITUATION OF WHEN LINE IS FIRST TIME CANCELLED AND BACKLOG_AMOUNT OR REVENUE_AMOUNT CHANGE */

/* 1-31-2020 REVISED BACKLOG_AMOUNT: SALESMAN_CODE=PRE_SALESMAN_CODE AND MARKET_CODE=PRE_MARKET_CODE AND REGION_CODE=PRE_REGION_CODE AND DISTRICT_CODE= PRE_DISTRICT_CODE AND PLANNED_DELIVERY_DATE=PRE_PLANNED_DELIVERY_DATE  */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= -(NET_AMOUNT_BASE/BUY_QTY_DUE)* (BUY_QTY_DUE-QTY_INVOICED)                       --  -(NET_AMOUNT_BASE/BUY_QTY_DUE)* (BUY_QTY_DUE-(QTY_INVOICED-PRE_QTY_INVOICED))   
WHERE LINE_STATE='Cancelled' AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE<>'INVOICED' AND PRE_ORDER_STATE ='BACKLOG' AND NET_AMOUNT_BASE=PRE_NET_AMOUNT_BASE  AND BUY_QTY_DUE<>0 /*LINE IS CANCELLED AFTER ORDER WAS RELEASED */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE LINE_STATE='Cancelled' AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE<>'INVOICED' AND PRE_ORDER_STATE ='BACKLOG' AND NET_AMOUNT_BASE=PRE_NET_AMOUNT_BASE  AND BUY_QTY_DUE<>0 /*LINE IS CANCELLED AFTER ORDER WAS RELEASED */


UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= - PRE_NET_AMOUNT_BASE
WHERE LINE_STATE='Cancelled' AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE<>'INVOICED' AND PRE_ORDER_STATE ='BACKLOG' AND NET_AMOUNT_BASE<>PRE_NET_AMOUNT_BASE    /* FOR SITUTATION OF LINE IS CANCELLED, AND AT THE SAME TIME NET_AMOUNT_BASE CHANGED, THE BACKLOG_AMOUNT SHALL REVERSE*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE LINE_STATE='Cancelled' AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE<>'INVOICED' AND PRE_ORDER_STATE ='BACKLOG' AND NET_AMOUNT_BASE<>PRE_NET_AMOUNT_BASE    /* FOR SITUTATION OF LINE IS CANCELLED, AND AT THE SAME TIME NET_AMOUNT_BASE CHANGED, THE BACKLOG_AMOUNT SHALL REVERSE*/

/*1-31-2020 REVISED BACKLOG_AMOUNT */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT=  -(NET_AMOUNT_BASE/BUY_QTY_DUE)*(BUY_QTY_DUE-QTY_INVOICED)                          -- -(NET_AMOUNT_BASE/BUY_QTY_DUE)*(BUY_QTY_DUE-(QTY_INVOICED-PRE_QTY_INVOICED))    
WHERE LINE_STATE='Cancelled' AND PRE_LINE_STATE <>LINE_STATE AND ORDER_STATE='INVOICED' AND PRE_ORDER_STATE ='BACKLOG' AND NET_AMOUNT_BASE=PRE_NET_AMOUNT_BASE AND PRE_QTY_INVOICED=0    AND BUY_QTY_DUE<>0        /* LINE WAS CANCELLED WHEN ORDER HAD BEEN INVOICED  AND INVOICED AMOUNT WAS 0. IT IS THE FIRST TIME THIS LINE WAS CANCELLED*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE LINE_STATE='Cancelled' AND PRE_LINE_STATE <>LINE_STATE AND ORDER_STATE='INVOICED' AND PRE_ORDER_STATE ='BACKLOG' AND NET_AMOUNT_BASE=PRE_NET_AMOUNT_BASE AND PRE_QTY_INVOICED=0    AND BUY_QTY_DUE<>0        /* LINE WAS CANCELLED WHEN ORDER HAD BEEN INVOICED  AND INVOICED AMOUNT WAS 0. IT IS THE FIRST TIME THIS LINE WAS CANCELLED*/

/*1-24-2020, ADD QTY_INVOICED=BUY_QTY_DUE; SITUATION OF WHEN LINE'S NET_BASE_AMOUNT CHANGED & BACKLOG_AMOUNT CHANGE */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= -(PRE_NET_AMOUNT_BASE/PRE_BUY_QTY_DUE)*(PRE_BUY_QTY_DUE-PRE_QTY_INVOICED)        /*-PRE_BACKLOG_BALANCE SO THAT THE BACKLOG_BALANCE=0 */ 
WHERE LINE_STATE='NB_CHANGED' AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='BACKLOG'   AND QTY_INVOICED=BUY_QTY_DUE AND BUY_QTY_DUE<>PRE_BUY_QTY_DUE AND QTY_INVOICED=PRE_QTY_INVOICED  /*NET_BASE_AMOUNT CHANGE AFTER ORDER WAS PARTIALITY DELIVERED AND DEDUCE BUY_QTY_DUE TO MAKE THE QTY_INVOICED=BUY_QTY_DUE , eg PO='P372780' LINE_NO='58'*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0                                   
WHERE LINE_STATE='NB_CHANGED' AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='BACKLOG'   AND QTY_INVOICED=BUY_QTY_DUE AND BUY_QTY_DUE<>PRE_BUY_QTY_DUE AND QTY_INVOICED=PRE_QTY_INVOICED  /*NET_BASE_AMOUNT CHANGE AFTER ORDER WAS PARTIALITY DELIVERED AND DEDUCE BUY_QTY_DUE TO MAKE THE QTY_INVOICED=BUY_QTY_DUE , eg PO='P372780' LINE_NO='58'*/

/*12-04-2019, ADD QTY_INVOICED<>BUY_QTY_DUE; 11-26-2019 SITUATION OF WHEN LINE IS NET_BASE_AMOUNT CHANGED & BACKLOG_AMOUNT OR REVENUE_AMOUNT CHANGE */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(BUY_QTY_DUE-QTY_INVOICED)-(PRE_NET_AMOUNT_BASE/PRE_BUY_QTY_DUE)*(PRE_BUY_QTY_DUE-PRE_QTY_INVOICED)    
WHERE LINE_STATE='NB_CHANGED' AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='BACKLOG'   AND QTY_INVOICED<>BUY_QTY_DUE  AND BUY_QTY_DUE<>0   /*NET_BASE_AMOUNT CHANGE AFTER ORDER WAS RELEASED , eg PO='P389320-1'*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0                                   
WHERE LINE_STATE='NB_CHANGED' AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='BACKLOG'   AND QTY_INVOICED<>BUY_QTY_DUE  AND BUY_QTY_DUE<>0   /*NET_BASE_AMOUNT CHANGE AFTER ORDER WAS RELEASED , eg PO='P389320-1'*/

/*1-31-2020 REVISED BACKLOG_AMOUNT: LINE WAS PARTIALLY DELIVERED. BUT TO INVOICE THIS LINE, BUY_QTY_DUE CHANGED TO MAKE THE REST QTY_DUE =0  */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(BUY_QTY_DUE-QTY_INVOICED)-(PRE_NET_AMOUNT_BASE/PRE_BUY_QTY_DUE)*(PRE_BUY_QTY_DUE-PRE_QTY_INVOICED)          -- NET_AMOUNT_BASE-PRE_NET_AMOUNT_BASE                                             
WHERE LINE_STATE='NB_CHANGED'  AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND LINE_OBJSTATE='INVOICED'  AND PRE_NET_AMOUNT_BASE<>0   AND BUY_QTY_DUE<>PRE_BUY_QTY_DUE AND QTY_INVOICED=BUY_QTY_DUE  AND QTY_INVOICED=PRE_QTY_INVOICED   AND BUY_QTY_DUE<>0  AND PRE_BUY_QTY_DUE<>0  /*AFTER ORDER WAS INVOICED(LINE WAS PARTIALLY DELIVERED), NET_BASE_AMOUNT CHANGED DUE TO BUY_QTY_DUE CHANGED TO MAKE THE REST QTY_DUE =0 , eg PO='*47653'  */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE LINE_STATE='NB_CHANGED'  AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND LINE_OBJSTATE='INVOICED'  AND PRE_NET_AMOUNT_BASE<>0   AND BUY_QTY_DUE<>PRE_BUY_QTY_DUE AND QTY_INVOICED=BUY_QTY_DUE  AND QTY_INVOICED=PRE_QTY_INVOICED   AND BUY_QTY_DUE<>0 AND PRE_BUY_QTY_DUE<>0   /*AFTER ORDER WAS INVOICED(LINE WAS PARTIALLY DELIVERED), NET_BASE_AMOUNT CHANGED DUE TO BUY_QTY_DUE CHANGED TO MAKE THE REST QTY_DUE =0 , eg PO='*47653'   */


/*1-31-2020 REVISED BACKLOG_AMOUNT: SITUATION OF WHEN LINE HAS NET_BASE_AMOUNT CHANGE & AT THE SAME TIME IT IS THE FIRST TIME LINE IS INVOICED */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE) *(BUY_QTY_DUE-QTY_INVOICED)-(PRE_NET_AMOUNT_BASE/PRE_BUY_QTY_DUE) *(PRE_BUY_QTY_DUE-PRE_QTY_INVOICED)       -- -(PRE_NET_AMOUNT_BASE/PRE_BUY_QTY_DUE)*(PRE_BUY_QTY_DUE-(PRE_QTY_INVOICED-PPRE_QTY_INVOICED))                     
WHERE  LINE_STATE='INVOICED_NB_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG') AND PRE_ORDER_STATE='BACKLOG' AND PRE_NET_AMOUNT_BASE<>0    AND QTY_INVOICED<=BUY_QTY_DUE     AND PRE_BUY_QTY_DUE<>0  AND BUY_QTY_DUE<>0 
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(QTY_INVOICED-PRE_QTY_INVOICED)                                                    
WHERE  LINE_STATE='INVOICED_NB_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG') AND PRE_ORDER_STATE='BACKLOG' AND PRE_NET_AMOUNT_BASE<>0    AND QTY_INVOICED<=BUY_QTY_DUE     AND PRE_BUY_QTY_DUE<>0  AND BUY_QTY_DUE<>0 


/*1-31-2020 ADDED*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0                     
WHERE  LINE_STATE='INVOICED_NB_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG') AND PRE_ORDER_STATE='BACKLOG' AND PRE_NET_AMOUNT_BASE=0    AND PRE_BUY_QTY_DUE<>0  AND BUY_QTY_DUE<>0 
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(QTY_INVOICED-PRE_QTY_INVOICED)                                                    
WHERE  LINE_STATE='INVOICED_NB_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG') AND PRE_ORDER_STATE='BACKLOG' AND PRE_NET_AMOUNT_BASE=0    AND PRE_BUY_QTY_DUE<>0  AND BUY_QTY_DUE<>0 

/*SITUTATION OF REVERSAL IS NEEDED */
        
		/*SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED WHEN LINE IS RELEASED*/		                                           
		UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)* (BUY_QTY_DUE-QTY_INVOICED)                                                  
		WHERE  LINE_STATE='ATT_Changed'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND ORDER_STATE='BACKLOG'  AND PRE_ORDER_STATE='BACKLOG'  AND NET_AMOUNT_BASE<>0 AND BUY_QTY_DUE<>0  /*AFTER ORDER WAS RELEASED*/
		UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
		WHERE  LINE_STATE='ATT_Changed'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND ORDER_STATE='BACKLOG'  AND PRE_ORDER_STATE='BACKLOG'  AND NET_AMOUNT_BASE<>0 AND BUY_QTY_DUE<>0  /*AFTER ORDER WAS RELEASED*/
 

        /*SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED WHEN LINE IS INVOICED*/
		UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
		WHERE  LINE_STATE='ATT_Changed'  AND PRE_LINE_OBJSTATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED' ) AND ORDER_STATE IN ('INVOICED','BACKLOG')  AND NET_AMOUNT_BASE<>0 AND BUY_QTY_DUE<>0   /*AFTER LINE WAS INVOICED*/
		UPDATE #Snapshot_Message SET REVENUE_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)* QTY_INVOICED                                                                
		WHERE  LINE_STATE='ATT_Changed'  AND PRE_LINE_OBJSTATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED' ) AND ORDER_STATE IN ('INVOICED','BACKLOG')  AND NET_AMOUNT_BASE<>0 AND BUY_QTY_DUE<>0  /*AFTER LINE WAS INVOICED*/
		
		                                         
		/*12-05-2019 CORRECTION: 11-26-2019 SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED & AT THE SAME TIME NET_BASE_AMOUNT CHANGE WHEN LINE IS RELEASED*/
		UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)* (BUY_QTY_DUE-QTY_INVOICED)                                                
		WHERE  LINE_STATE='A_N_Changed'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG' AND BUY_QTY_DUE<>QTY_INVOICED AND BUY_QTY_DUE<>0 -- AND PRE_NET_AMOUNT_BASE<>0    /*11-26-2019 : remove condition of PRE_NET_AMOUNT_BASE<>0, see PO='P389320-1' & 'P368516-3'. AFTER ORDER WAS RELEASED*/
		UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
		WHERE  LINE_STATE='A_N_Changed'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG' AND BUY_QTY_DUE<>QTY_INVOICED AND BUY_QTY_DUE<>0 -- AND PRE_NET_AMOUNT_BASE<>0    /*11-26-2019 : remove condition of PRE_NET_AMOUNT_BASE<>0, see PO='P389320-1' & 'P368516-3'. AFTER ORDER WAS RELEASED*/

        
        /*SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED & AT THE SAME TIME NET_BASE_AMOUNT CHANGE WHEN LINE IS INVOICED*/
		UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
		WHERE  LINE_STATE='A_N_Changed'  AND PRE_LINE_OBJSTATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED' ) AND ORDER_STATE IN ('INVOICED','BACKLOG')   AND PRE_NET_AMOUNT_BASE<>0  AND BUY_QTY_DUE<>0  /*AFTER LINE WAS INVOICED*/
		UPDATE #Snapshot_Message SET REVENUE_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*QTY_INVOICED                                                                
		WHERE  LINE_STATE='A_N_Changed'  AND PRE_LINE_OBJSTATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED' ) AND ORDER_STATE IN ('INVOICED','BACKLOG')   AND PRE_NET_AMOUNT_BASE<>0   AND BUY_QTY_DUE<>0 /*AFTER LINE WAS INVOICED*/

		/*11-25-2019 SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED & AT THE SAME TIME IT IS THE FIRST TIME LINE IS INVOICED FROM RELEASED*/
		UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
		WHERE  LINE_STATE='INVOICED_ATT_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG' AND NET_AMOUNT_BASE<>0  AND QTY_INVOICED=BUY_QTY_DUE AND BUY_QTY_DUE<>0 
		UPDATE #Snapshot_Message SET REVENUE_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(QTY_INVOICED-PRE_QTY_INVOICED)                                             
		WHERE  LINE_STATE='INVOICED_ATT_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG' AND NET_AMOUNT_BASE<>0  AND QTY_INVOICED=BUY_QTY_DUE AND BUY_QTY_DUE<>0 

		/*1-31-2020 REVIESED BACKLOG_AMOUNT: SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED & AT THE SAME TIME IT IS THE FIRST TIME LINE IS INVOICED FOR PARTITIALLY DELIVERED*/
		UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(BUY_QTY_DUE-QTY_INVOICED)                                                  
		WHERE  LINE_STATE='INVOICED_ATT_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG' AND NET_AMOUNT_BASE<>0  AND QTY_INVOICED<>BUY_QTY_DUE AND BUY_QTY_DUE<>0 
		UPDATE #Snapshot_Message SET REVENUE_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(QTY_INVOICED-PRE_QTY_INVOICED)                                            
		WHERE  LINE_STATE='INVOICED_ATT_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG' AND NET_AMOUNT_BASE<>0  AND QTY_INVOICED<>BUY_QTY_DUE AND BUY_QTY_DUE<>0 

		/*SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED, NET_BASE_AMOUNT CHANGED  & AT THE SAME TIME IT IS THE FIRST TIME LINE IS INVOICED FROM RELEASED */
		UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
		WHERE  LINE_STATE='INVOICED_A_N_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG' AND PRE_NET_AMOUNT_BASE<>0   AND BUY_QTY_DUE<>0 
		UPDATE #Snapshot_Message SET REVENUE_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(QTY_INVOICED-PRE_QTY_INVOICED)                                            
		WHERE  LINE_STATE='INVOICED_A_N_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG' AND PRE_NET_AMOUNT_BASE<>0   AND BUY_QTY_DUE<>0 


/*SITUTATION OF REVERSAL IS NOT NEEDED */
		/*12-05-2019 CORRECTION: 11-25-2019 ADD: NET_AMOUNT_BASE WAS 0 WHEN ORDER WAS RELEASED, BUT NOW THE NET_AMOUNT_BASE >0 AND AT THE SAME TIME SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED, eg PO='*47653' */
		UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= (NET_AMOUNT_BASE/BUY_QTY_DUE)*(BUY_QTY_DUE-QTY_INVOICED)                                                 
		WHERE  LINE_STATE='A_N_Changed'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG'   AND PRE_NET_AMOUNT_BASE=0  AND NET_AMOUNT_BASE<>0  AND BUY_QTY_DUE<>0 
		UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
		WHERE  LINE_STATE='A_N_Changed'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG'   AND PRE_NET_AMOUNT_BASE=0  AND NET_AMOUNT_BASE<>0  AND BUY_QTY_DUE<>0 
										



                                                /*END OF SITUATION OF CHANGE ON BACKLOG_AMOUNT OR REVENUE_AMOUNT*/

								                  /*SITUATION OF NO CHANGE ON BACKLOG_AMOUNT & REVENUE_AMOUNT*/

								               /***********************************************************************/
											   /*   NO SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED  */
											   /***********************************************************************/


                                               /*BEFORE ORDER IS RELEASED*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  ORDER_STATE='PLANNED'                                  /*ORDER IS IN STAGE OF 'PLANNED' */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  ORDER_STATE='PLANNED'                                  /*ORDER IS IN STAGE OF 'PLANNED' */



                                               /*AFTER LINE WAS CANCELLED*/
/*LINE_STATE NOT CHANGED*/
/*ORDER_STATE NOT CHANGED, AND LINE_STATE NOT CHANGED*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE ORDER_STATE='CANCELLED' AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND PRE_LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')            /*ORDER WAS CANCELLED AND LINE_STATE STAYS THE SAME*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE ORDER_STATE='CANCELLED' AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND PRE_LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')            /*ORDER WAS CANCELLED AND LINE_STATE STAYS THE SAME*/

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='BACKLOG'  AND PRE_LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')      /*ORDER WAS RELEASED AND LINE WAS CANCELLED*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='BACKLOG'  AND PRE_LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')      /*ORDER WAS RELEASED AND LINE WAS CANCELLED*/

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE ORDER_STATE='BACKLOG' AND  LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND PRE_LINE_STATE='INVOICED' AND  QTY_INVOICED=0       /*ORDER WAS RELEASED AND LINE IS CANCELLED AND PRE_LINE_STATE WAS INVOICED BUT QTY_INVOICED=0 */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE ORDER_STATE='BACKLOG' AND  LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND PRE_LINE_STATE='INVOICED' AND  QTY_INVOICED=0       /*ORDER WAS RELEASED AND LINE IS CANCELLED AND PRE_LINE_STATE WAS INVOICED BUT QTY_INVOICED=0 */

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE ORDER_STATE='INVOICED' AND PRE_ORDER_STATE='INVOICED'  AND PRE_LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')     /*ORDER WAS INVOICED AND LINE WAS CANCELLED*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE ORDER_STATE='INVOICED' AND PRE_ORDER_STATE='INVOICED'  AND PRE_LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')      /*ORDER WAS INVOICED AND LINE WAS CANCELLED*/


/*ORDER_STATE CHANGED, AND LINE_STATE NOT CHANGED*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE ORDER_STATE='Cancelled' AND PRE_ORDER_STATE='PLANNED'        /*ORDER IS CANCELLED BEFORE ORDER IS RELEASED */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE ORDER_STATE='Cancelled' AND PRE_ORDER_STATE='PLANNED'        /*ORDER IS CANCELLED BEFORE ORDER IS RELEASED */


UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE ORDER_STATE='Cancelled' AND PRE_ORDER_STATE='BACKLOG'  AND PRE_LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')      /*ORDER IS CHANGED FROM BACKLOG TO CANCELLED AFTER LINE WAS CANCELLED WHEN ORDER WAS BACKLOG */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE ORDER_STATE='Cancelled' AND PRE_ORDER_STATE='BACKLOG'  AND PRE_LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')      /*ORDER IS CHANGED FROM BACKLOG TO CANCELLED AFTER LINE WAS CANCELLED WHEN ORDER WAS BACKLOG */

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE ORDER_STATE='INVOICED' AND PRE_ORDER_STATE='BACKLOG'  AND PRE_LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')     /*ORDER IS CHANGED FROM BACKLOG TO INVOIED AFTER LINE WAS CANCELLED*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE ORDER_STATE='INVOICED' AND PRE_ORDER_STATE='BACKLOG'  AND PRE_LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')    /*ORDER IS CHANGED FROM BACKLOG TO INVOIED AFTER LINE WAS CANCELLED*/

/*ADDED ON 1-22-2020 */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE ORDER_STATE='BACKLOG'  AND PRE_ORDER_STATE='INVOICED'  AND PRE_LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')     /*ORDER IS CHANGED FROM INVOIED TO BACKLOG AFTER LINE WAS CANCELLED*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE ORDER_STATE='BACKLOG'  AND PRE_ORDER_STATE='INVOICED'  AND PRE_LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')     /*ORDER IS CHANGED FROM INVOIED TO BACKLOG AFTER LINE WAS CANCELLED*/


/*LINE_STATE CHANGED*/
/*ADDED ON 1-22-2020 : ORDER_STATE NOT CHANGED, AND LINE_STATE CHANGED*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0      
WHERE ORDER_STATE='BACKLOG' AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')  AND  PRE_LINE_STATE='0' AND  WAS_ORDER_PLANNED='Y'  /*ORDER WAS RELEASED AND LINE IS CANCELLED */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0      
WHERE ORDER_STATE='BACKLOG' AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')  AND  PRE_LINE_STATE='0' AND  WAS_ORDER_PLANNED='Y'  /*ORDER WAS RELEASED AND LINE IS CANCELLED */

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0      
WHERE ORDER_STATE='CANCELLED' AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')  AND  PRE_LINE_STATE='0' AND  WAS_ORDER_PLANNED='Y'  /*ORDER IS CANCELLED AND LINE WAS CANCELLED */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0      
WHERE ORDER_STATE='CANCELLED' AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')  AND  PRE_LINE_STATE='0' AND  WAS_ORDER_PLANNED='Y'  /*ORDER IS CANCELLED AND LINE WAS CANCELLED */

/*ADDED ON 1-22-2020 : ORDER_STATE  CHANGED, AND LINE_STATE CHANGED*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0      
WHERE ORDER_STATE='INVOICED' AND PRE_ORDER_STATE='PLANNED' AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')  AND  PRE_LINE_STATE='PLANNED'  /*ORDER IS CHANGED FROM PLANNED TO INVOICED AND LINE IS CANCELLED AT THE SAME TIME */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0      
WHERE ORDER_STATE='INVOICED' AND PRE_ORDER_STATE='PLANNED' AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')  AND  PRE_LINE_STATE='PLANNED'  /*ORDER IS CHANGED FROM PLANNED TO INVOICED AND LINE IS CANCELLED AT THE SAME TIME */


                                               /*AFTER LINE WAS INVOICED*/
/*LINE_STATE STAY THE SAME AND ORDER_STATE STAY THE SAME*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  ORDER_STATE='BACKLOG' AND LINE_STATE='INVOICED'  AND PRE_LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED')  AND QTY_INVOICED=PRE_QTY_INVOICED         /*ORDER WAS RELEASED AND LINE_STATE STAYS THE SAME*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  ORDER_STATE='BACKLOG' AND LINE_STATE='INVOICED'  AND PRE_LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED')  AND QTY_INVOICED=PRE_QTY_INVOICED          /*ORDER WAS RELEASED AND LINE_STATE STAYS THE SAME*/

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  ORDER_STATE='INVOICED' AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='INVOICED'  AND PRE_LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED')  AND QTY_INVOICED=PRE_QTY_INVOICED         /*ORDER WAS CHANGED FROM RELEASED TO INVOICED AND LINE_STATE STAYS THE SAME*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  ORDER_STATE='INVOICED' AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='INVOICED'  AND PRE_LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED')  AND QTY_INVOICED=PRE_QTY_INVOICED         /*ORDER WAS CHANGED FROM RELEASED TO INVOICED AND LINE_STATE STAYS THE SAME*/

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  ORDER_STATE='INVOICED' AND LINE_STATE='INVOICED'  AND PRE_LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED')  AND QTY_INVOICED=PRE_QTY_INVOICED            /*ORDER WAS INVOICED AND LINE_STATE STAYS THE SAME*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  ORDER_STATE='INVOICED' AND LINE_STATE='INVOICED'  AND PRE_LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED')  AND QTY_INVOICED=PRE_QTY_INVOICED            /*ORDER WAS INVOICED AND LINE_STATE STAYS THE SAME*/

/*LINE_STATE STAY THE SAME AND ORDER_STATE CHANGED*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE ORDER_STATE ='BACKLOG' AND PRE_ORDER_STATE ='INVOICED' AND PRE_LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED')  AND QTY_INVOICED=PRE_QTY_INVOICED       /*PO WAS INVOICED, BUT 'NEW CHARGE LINE ADDED', OBJSTATE='DELIVERED' PRE_OBJSTATE='INVOICED', LINE_OBJSTATE THE SAME  & NET_AMOUNT_BASE STAY THE SAME. eg, 'P394162'*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT=0 
WHERE ORDER_STATE ='BACKLOG' AND PRE_ORDER_STATE ='INVOICED' AND PRE_LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED')  AND QTY_INVOICED=PRE_QTY_INVOICED       /*PO WAS INVOICED, BUT 'NEW CHARGE LINE ADDED', OBJSTATE='DELIVERED' PRE_OBJSTATE='INVOICED', LINE_OBJSTATE THE SAME  & NET_AMOUNT_BASE STAY THE SAME. eg, 'P394162'*/

/*LINE_STATE CHANGED AND ORDER_STATE STAY THE SAME*/
/*ORDER WAS BACKLOG AND LINE WAS PARTIALLY DELIVERED*/					 
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='BACKLOG'  AND PRE_LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED')  AND QTY_INVOICED<>BUY_QTY_DUE       /*LINE WAS PARTIALLY DELIVERED*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='BACKLOG'  AND PRE_LINE_STATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED')  AND QTY_INVOICED<>BUY_QTY_DUE       /*LINE WAS PARTIALLY DELIVERED*/

/*LINE_STATE CHANGED BACK TO INVOICED (QTY_INVOICED=PRE_QTY_INVOICED )AND ORDER_STATE STAY THE SAME  */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='INVOICED'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED')  AND QTY_INVOICED=PRE_QTY_INVOICED         /*ORDER WAS RELEASED AND QTY_INVOICED=PRE_QTY_INVOICED STAYS THE SAME*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='INVOICED'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED')  AND QTY_INVOICED=PRE_QTY_INVOICED         /*ORDER WAS RELEASED AND QTY_INVOICED=PRE_QTY_INVOICED STAYS THE SAME*/


UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0     
WHERE ORDER_STATE='INVOICED' AND PRE_ORDER_STATE='INVOICED' AND LINE_STATE='Invoiced'   AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED')  AND QTY_INVOICED=PRE_QTY_INVOICED  /*LINE HAS NO CHANGE AFTER THE PREVIOUS LINE_STATE CHANGES WHEN ORDER WAS INVOICED */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0    
WHERE ORDER_STATE='INVOICED' AND PRE_ORDER_STATE='INVOICED' AND LINE_STATE='Invoiced'   AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED')  AND QTY_INVOICED=PRE_QTY_INVOICED  /*LINE HAS NO CHANGE AFTER THE PREVIOUS LINE_STATE CHANGES WHEN ORDER WAS INVOICED */

	
/*ORDER WAS INVOICED AND NET_AMOUNT_BASE CHANGED*/					 
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE LINE_STATE='NB_CHANGED'    AND ORDER_STATE='INVOICED'  AND BUY_QTY_DUE=PRE_BUY_QTY_DUE      /*AFTER ORDER WAS INVOICED, NET_BASE_AMOUNT CHANGE DUE TO PRICE/DISCOUNT/QUANTITY/PRICE FACTOR/ADDITIONAL DISCOUNT */  
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE LINE_STATE='NB_CHANGED'    AND ORDER_STATE='INVOICED'  AND BUY_QTY_DUE=PRE_BUY_QTY_DUE      /*AFTER ORDER WAS INVOICED, NET_BASE_AMOUNT CHANGE DUE TO PRICE/DISCOUNT/QUANTITY/PRICE FACTOR/ADDITIONAL DISCOUNT */ 

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE LINE_STATE='NB_CHANGED'    AND ORDER_STATE='INVOICED'  AND BUY_QTY_DUE<>PRE_BUY_QTY_DUE   AND PRE_NET_AMOUNT_BASE=0    /*AFTER ORDER WAS INVOICED, NET_BASE_AMOUNT CHANGE DUE TO BUY_QTY_DUE, BUT PRE_NET_AMOUNT_BASE IS 0.  */  
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE LINE_STATE='NB_CHANGED'    AND ORDER_STATE='INVOICED'  AND BUY_QTY_DUE<>PRE_BUY_QTY_DUE   AND PRE_NET_AMOUNT_BASE=0    /*AFTER ORDER WAS INVOICED, NET_BASE_AMOUNT CHANGE DUE TO BUY_QTY_DUE, BUT PRE_NET_AMOUNT_BASE IS 0.  */ 


                                               /*BEWEEN LINE WAS RELEASED AND LINE WAS INVOICED*/
/*WHEN ORDER WAS RELEASED AND LINE_STATE STAYS THE SAME*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE ORDER_STATE='BACKLOG' AND  PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='BACKLOG' AND LINE_STATE=PRE_LINE_STATE               /*ORDER WAS RELEASED & LINE_STATE STAY THE SAME */         
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE ORDER_STATE='BACKLOG' AND  PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='BACKLOG' AND LINE_STATE=PRE_LINE_STATE               /*ORDER WAS RELEASED & LINE_STATE STAY THE SAME */

UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE ORDER_STATE='BACKLOG' AND  PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='BACKLOG' AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED')              /*ORDER WAS RELEASED & LINE_STATE CHANGED BACK TO 'BACKLOG' */         
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE ORDER_STATE='BACKLOG' AND  PRE_ORDER_STATE='BACKLOG' AND LINE_STATE='BACKLOG' AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED')              /*ORDER WAS RELEASED & LINE_STATE CHANGED BACK TO 'BACKLOG' */ 

/*1-24-2020, ADD QTY_INVOICED=BUY_QTY_DUE=PRE_BUY_QTY_DUE; SITUATION OF WHEN LINE'S NET_BASE_AMOUNT CHANGED & BACKLOG_BALANCE=0, SO BACKLOG_AMOUNT NOT CHANGE */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0       /*THE BACKLOG_BALANCE=0 */ 
WHERE LINE_STATE='NB_CHANGED' AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='BACKLOG'   AND QTY_INVOICED=BUY_QTY_DUE AND BUY_QTY_DUE=PRE_BUY_QTY_DUE AND QTY_INVOICED=PRE_QTY_INVOICED  /*NET_BASE_AMOUNT CHANGE AFTER ORDER WAS PARTIALITY DELIVERED AND QTY_INVOICED=BUY_QTY_DUE=PRE_BUY_QTY_DUE, BACKLOG_AMOUNT NOT NEED TO CHANGE , eg PO='P372780' LINE_NO='58'*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0                                   
WHERE LINE_STATE='NB_CHANGED' AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='BACKLOG'   AND QTY_INVOICED=BUY_QTY_DUE AND BUY_QTY_DUE=PRE_BUY_QTY_DUE AND QTY_INVOICED=PRE_QTY_INVOICED  /*NET_BASE_AMOUNT CHANGE AFTER ORDER WAS PARTIALITY DELIVERED AND QTY_INVOICED=BUY_QTY_DUE=PRE_BUY_QTY_DUE, BACKLOG_AMOUNT NOT NEED TO CHANGE , eg PO='P372780' LINE_NO='58'*/


/*WHEN ORDER WAS RELEASED AND LINE_STATE CHANGED BUT BOOKINGS STAY  THE SAME */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0       
WHERE ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='PLANNED'    AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')  AND PRE_LINE_STATE='PLANNED'  /*WHEN ORDER IS RELEASED , LINE IS CANCELLED AT THE SAME TIME */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0   
WHERE ORDER_STATE='BACKLOG' AND PRE_ORDER_STATE='PLANNED'    AND LINE_STATE IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')  AND PRE_LINE_STATE='PLANNED'  /*WHEN ORDER IS RELEASED , LINE IS CANCELLED AT THE SAME TIME */

/*11-25-2019 SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED & AT THE SAME TIME NET_BASE_AMOUNT CHANGE AND LINE_OBJSTATE CHANGED TO 'INVOICED' DUE TO BUY_QTY_DUE CHANGED. */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  LINE_STATE='A_N_Changed'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG'   AND PRE_NET_AMOUNT_BASE<>0   AND QTY_INVOICED=BUY_QTY_DUE AND QTY_INVOICED=PRE_QTY_INVOICED /*AFTER ORDER WAS RELEASED*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  LINE_STATE='A_N_Changed'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG'   AND PRE_NET_AMOUNT_BASE<>0   AND QTY_INVOICED=BUY_QTY_DUE AND QTY_INVOICED=PRE_QTY_INVOICED /*AFTER ORDER WAS RELEASED*/


                                               /**********************************************************************************************************************/
											   /*   SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED  BUT NO REVERSAL IS NEEDED WHEN NET_AMOUNT_BASE=0  */
											   /**********************************************************************************************************************/

/*SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED WHEN LINE IS RELEASED*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  LINE_STATE='ATT_Changed'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND ORDER_STATE='BACKLOG'  AND PRE_ORDER_STATE='BACKLOG'  AND NET_AMOUNT_BASE=0  /*AFTER ORDER WAS RELEASED*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  LINE_STATE='ATT_Changed'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND ORDER_STATE='BACKLOG'  AND PRE_ORDER_STATE='BACKLOG'  AND NET_AMOUNT_BASE=0  /*AFTER ORDER WAS RELEASED*/
 
/*SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED WHEN LINE IS INVOICED*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  LINE_STATE='ATT_Changed'  AND PRE_LINE_OBJSTATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED' ) AND ORDER_STATE IN ('INVOICED','BACKLOG')  AND NET_AMOUNT_BASE=0   /*AFTER LINE WAS INVOICED*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  LINE_STATE='ATT_Changed'  AND PRE_LINE_OBJSTATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED' ) AND ORDER_STATE IN ('INVOICED','BACKLOG')  AND NET_AMOUNT_BASE=0   /*AFTER LINE WAS INVOICED*/
		

/*SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED & AT THE SAME TIME NET_BASE_AMOUNT CHANGE WHEN LINE IS RELEASED*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  LINE_STATE='A_N_Changed'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG'   AND PRE_NET_AMOUNT_BASE=0  AND  NET_AMOUNT_BASE=0   /*11-26-2019 ADD CONDITON OF NET_AMOUNT_BASE=0 . SEE PO='P389320-1' & 'P368516-3'. AFTER ORDER WAS RELEASED*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  LINE_STATE='A_N_Changed'  AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG'   AND PRE_NET_AMOUNT_BASE=0  AND  NET_AMOUNT_BASE=0   /*11-26-2019 ADD CONDITON OF NET_AMOUNT_BASE=0 . SEE PO='P389320-1' & 'P368516-3'. AFTER ORDER WAS RELEASED*/
 
/*SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED & AT THE SAME TIME NET_BASE_AMOUNT CHANGE WHEN LINE IS INVOICED*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  LINE_STATE='A_N_Changed'  AND PRE_LINE_OBJSTATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED' ) AND ORDER_STATE IN ('INVOICED','BACKLOG')   AND PRE_NET_AMOUNT_BASE=0   /*AFTER LINE WAS INVOICED*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  LINE_STATE='A_N_Changed'  AND PRE_LINE_OBJSTATE IN ('INVOICED','INVOICED_NB_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED' ) AND ORDER_STATE IN ('INVOICED','BACKLOG')   AND PRE_NET_AMOUNT_BASE=0   /*AFTER LINE WAS INVOICED*/

/*SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED & AT THE SAME TIME IT IS THE FIRST TIME LINE IS INVOICED FROM RELEASED*/
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  LINE_STATE='INVOICED_ATT_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG' AND NET_AMOUNT_BASE=0  
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  LINE_STATE='INVOICED_ATT_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG' AND NET_AMOUNT_BASE=0  

/*SITUATION OF SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED, NET_BASE_AMOUNT CHANGED  & AT THE SAME TIME IT IS THE FIRST TIME LINE IS INVOICED FROM RELEASED */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  LINE_STATE='INVOICED_A_N_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG' AND PRE_NET_AMOUNT_BASE=0  
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  LINE_STATE='INVOICED_A_N_CHANGED' AND PRE_LINE_STATE IN ('BACKLOG','NB_CHANGED','ATT_CHANGED','A_N_CHANGED') AND PRE_ORDER_STATE='BACKLOG' AND PRE_NET_AMOUNT_BASE=0  

/*12-10-2019 ADD: IF BUY_QTY_DUE=0*/     
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE  BUY_QTY_DUE=0
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE  BUY_QTY_DUE=0

/*12-12-2019:  LINE IS CANCELLED, AND REVERSAL IS NEEDED BUT NO CHANGE ON BACKLOG_AMOUNT & REVENUE_AMOUNT WHEN NET_AMOUNT_BASE<>0   */
UPDATE #Snapshot_Message SET BACKLOG_AMOUNT=0  --(-BASE_SALE_UNIT_PRICE)*(BUY_QTY_DUE-(QTY_INVOICED-PRE_QTY_INVOICED))*PRICE_CONV_FACTOR*(1-DISCOUNT/100)*(1-ADDITIONAL_DISCOUNT/100)
WHERE LINE_STATE IN ('CANCELLED_ATT','CANCELLED_A_N') AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE<>'INVOICED' AND PRE_ORDER_STATE ='BACKLOG' AND NET_AMOUNT_BASE=PRE_NET_AMOUNT_BASE  AND BUY_QTY_DUE<>0 /*LINE IS CANCELLED AFTER ORDER WAS RELEASED */
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE LINE_STATE IN ('CANCELLED_ATT','CANCELLED_A_N') AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE<>'INVOICED' AND PRE_ORDER_STATE ='BACKLOG' AND NET_AMOUNT_BASE=PRE_NET_AMOUNT_BASE  AND BUY_QTY_DUE<>0 /*LINE IS CANCELLED AFTER ORDER WAS RELEASED */


UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE LINE_STATE IN ('CANCELLED_ATT','CANCELLED_A_N') AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE<>'INVOICED' AND PRE_ORDER_STATE ='BACKLOG' AND NET_AMOUNT_BASE<>PRE_NET_AMOUNT_BASE    /* FOR SITUTATION OF LINE IS CANCELLED, AND AT THE SAME TIME NET_AMOUNT_BASE CHANGED, THE BACKLOG_AMOUNT SHALL REVERSE*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE LINE_STATE IN ('CANCELLED_ATT','CANCELLED_A_N') AND PRE_LINE_STATE IN ('NB_CHANGED','ATT_CHANGED','A_N_CHANGED','BACKLOG') AND ORDER_STATE<>'INVOICED' AND PRE_ORDER_STATE ='BACKLOG' AND NET_AMOUNT_BASE<>PRE_NET_AMOUNT_BASE    /* FOR SITUTATION OF LINE IS CANCELLED, AND AT THE SAME TIME NET_AMOUNT_BASE CHANGED, THE BACKLOG_AMOUNT SHALL REVERSE*/


UPDATE #Snapshot_Message SET BACKLOG_AMOUNT= 0
WHERE LINE_STATE IN ('CANCELLED_ATT','CANCELLED_A_N') AND PRE_LINE_STATE NOT IN ('Cancelled','CANCELLED_ATT','CANCELLED_A_N') AND ORDER_STATE='INVOICED' AND PRE_ORDER_STATE ='BACKLOG' AND NET_AMOUNT_BASE=PRE_NET_AMOUNT_BASE AND PRE_QTY_INVOICED=0    AND BUY_QTY_DUE<>0        /* LINE WAS CANCELLED WHEN ORDER HAD BEEN INVOICED  AND INVOICED AMOUNT WAS 0. IT IS THE FIRST TIME THIS LINE WAS CANCELLED*/
UPDATE #Snapshot_Message SET REVENUE_AMOUNT= 0
WHERE LINE_STATE IN ('CANCELLED_ATT','CANCELLED_A_N') AND PRE_LINE_STATE NOT IN ('Cancelled','CANCELLED_ATT','CANCELLED_A_N') AND ORDER_STATE='INVOICED' AND PRE_ORDER_STATE ='BACKLOG' AND NET_AMOUNT_BASE=PRE_NET_AMOUNT_BASE AND PRE_QTY_INVOICED=0    AND BUY_QTY_DUE<>0        /* LINE WAS CANCELLED WHEN ORDER HAD BEEN INVOICED  AND INVOICED AMOUNT WAS 0. IT IS THE FIRST TIME THIS LINE WAS CANCELLED*/



                                         
										  /*END OF SITUATION OF NO CHANGE ON BACKLOG_AMOUNT & REVENUE_AMOUNT*/

                                              /************************************************************************************/
											  /*  REVERSAL WHEN SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED     */
											  /************************************************************************************/

											  /* STEP 1: INSERT THE PRIOR RECORD */
    /* THE PRIOR ROW TO THE FIRST ROW OF THIS GROUP WILL BE REVERSED */    
	/* IF THE PRIOR RECORD'S DATA_SOURCE IS 'DETAIL', IT IS OK TO INSERT THIS PRIOR RECORD
	   IF THE PRIOR RECORD'S DATE_SOURCE IS 'HEADER', ONLY THE RECORD WHOSE PRIOR RECORD'S LINE_NO & LINE_ITEM_NO MATCH THIS RECORD WILL BE INSERTED */  
			INSERT INTO #Snapshot_Message 
            SELECT 
			        S.DATA_SOURCE
					,S.OBJVERSION
					,S.HISTORY_NO
					,LAG(S.HISTORY_NO,1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS PREVIOUS_HISTORY_NO
					,S.ORDER_NO
					,RV.SITE_LOCAL_DATETIME
					,CAST(LAG(S.SITE_LOCAL_DATETIME,1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION, S.HISTORY_NO) AS DATETIME) AS PRE_SITE_LOCAL_DATETIME
					,CAST(LEAD(S.SITE_LOCAL_DATETIME,1,DATEADD(d,1,GETDATE())) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION, S.HISTORY_NO) AS DATETIME) AS NEXT_SITE_LOCAL_DATETIME
					,CONVERT(DATE, RV.SITE_LOCAL_DATETIME)
					,S.LINE_NO
					,S.REL_NO
					,S.LINE_ITEM_NO
					,ISNULL(S.SALESMAN_CODE,-1)  /* THE COLUMN OF SALESMEN_CODE/MARKET_CODE/REGION_CODE/DISTRICT_CODE WILL BE -1 IF IT IS NULL*/
					,CAST(LAG(ISNULL(S.SALESMAN_CODE,-1),1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS NVARCHAR(20)) AS PREVIOUS_SALESMAN_CODE
					,ISNULL(S.MARKET_CODE,-1)
					,CAST(LAG(ISNULL(S.MARKET_CODE,-1),1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS NVARCHAR(10)) AS PREVIOUS_MARKET_CODE
					,ISNULL(S.REGION_CODE,-1)
					,CAST(LAG(ISNULL(S.REGION_CODE,-1),1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS NVARCHAR(10)) AS PREVIOUS_REGION_CODE
					,ISNULL(S.DISTRICT_CODE,-1)
					,CAST(LAG(ISNULL(S.DISTRICT_CODE,-1),1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS NVARCHAR(10)) AS PREVIOUS_DISTRICT_CODE
					,S.PLANNED_DELIVERY_DATE     /*THE COLUMN OF PLANNED_DELIVERY_DATE WILL BE DATEADD(YEAR,-1,GETDATE()) IF IT IS NULL*/ 
					,CAST(LAG(ISNULL(S.PLANNED_DELIVERY_DATE, DATEADD(YEAR,-1,GETDATE())),1,0) OVER (PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS datetime)as PREVIOUS_PLANNED_DELIVERY_DATE   			 															        
					,S.BUY_QTY_DUE
					,CAST(LAG(S.BUY_QTY_DUE,1,0) OVER (PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS numeric(38,4))as PREVIOUS_BUY_QTY_DUE
					,S.QTY_INVOICED
					,CAST(LAG(S.QTY_INVOICED,1,0) OVER (PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS numeric(38,4))as PREVIOUS_QTY_INVOICED
					,CAST(LAG(S.QTY_INVOICED,2,0) OVER (PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS numeric(38,4))as P_PREVIOUS_QTY_INVOICED
					,RV.OBJSTATE                 --,S.OBJSTATE (12-13-2019)
					,S.OBJSTATE                  --,CAST(LAG(S.OBJSTATE,1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS NVARCHAR(20)) AS PREVIOUS_OBJSTATE (12-13-2019)
					,RV.LINE_OBJSTATE            --,S.LINE_OBJSTATE (12-13-2019)
					,S.LINE_OBJSTATE             --,CAST(LAG(S.LINE_OBJSTATE,1,0) OVER(PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS NVARCHAR(20)) AS PREVIOUS_LINE_OBJSTATE (12-13-2019)
					,RV.NET_AMOUNT_BASE                                 --,S.NET_AMOUNT_BASE (12-12-2019 eg PO='*47653')  
					,S.NET_AMOUNT_BASE  AS PREVIOUS_NET_AMOUNT_BASE     --,LAG(S.NET_AMOUNT_BASE,1,0) OVER (PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) as PREVIOUS_NET_AMOUNT_BASE  (12-12-2019 eg PO='*47653')									
					,CAST (ROW_NUMBER() OVER (PARTITION BY S.ORDER_NO, S.LINE_NO, S.REL_NO, S.LINE_ITEM_NO ORDER BY S.OBJVERSION,S.HISTORY_NO) AS INT)as LINE_HISTORY_ORDER
					,RV.ORDER_STATE					
					, '0'  /* '0' AS DEFAULT FOR PRE_ORDER_SATE */
					, CASE          /*CHANGED FROM S.OBJSTATE TO RV.OBJSTATE (12-13-2019)*/                                        
					       WHEN RV.OBJSTATE IS NULL THEN CAST('Planned' AS NVARCHAR(20))                                               
						   WHEN RV.OBJSTATE='planned' THEN CAST('Planned' AS NVARCHAR(20))       
						   WHEN RV.LINE_OBJSTATE='Cancelled' THEN CAST('Cancelled' AS NVARCHAR(20))
						   WHEN RV.LINE_OBJSTATE='Invoiced' THEN CAST('Invoiced'AS NVARCHAR(20))
						   ELSE CAST('Backlog' AS NVARCHAR(20))
					   END AS 'LINE_STATE'
					,'0'  /* '0' AS DEFAULT FOR PRE_LINE_STATE */
					,'Y'

					, 1 /* 1 MEANS THIS RECORD IS INSERTED TO REVERSE PRIOR RECORD   */
					,-1 /* -1 MEANS BACKLOG_AMOUNT = -1 AS DEFAULT IS ASSIGNED TO A REVERSAL ROW, AND BACKLOG_AMOUNT ALWAYS NEED TO BE UPDATED FOR REVERSAL ROW*/
					,0  /* 0 MEANS REVENUE_AMOUNT = IS ASSIGNED TO A REVERSAL ROW AS DEFAULT*/

			FROM [dbo].[RAW_ORDER_LINE_SNAPSHOT] S
            INNER JOIN
			                     (  								    
			                        SELECT PRE_HISTORY_NO, LINE_NO, REL_NO, LINE_ITEM_NO, SITE_LOCAL_DATETIME, OBJSTATE,ORDER_STATE,LINE_OBJSTATE,LINE_STATE,NET_AMOUNT_BASE                                   /*12-13-2019 ADD: OBJSTATE,ORDER_STATE,LINE_OBJSTATE,LINE_STATE,NET_AMOUNT_BASE; AND IT WILL BE USED IN THE COLUMNS ABOVE*/
									FROM   #Snapshot_Message
									WHERE  LINE_STATE IN ('ATT_Changed','A_N_CHANGED','INVOICED_ATT_CHANGED','INVOICED_A_N_CHANGED','CANCELLED_ATT','CANCELLED_A_N')                                           /*12-13-2019 ADD: 'CANCELLED_ATT','CANCELLED_A_N'*/
									       AND INSERT_FOR_REVERSAL=0 
						                   AND ORDER_STATE NOT IN ('PLANNED') AND PRE_ORDER_STATE NOT IN ('PLANNED','CANCELLED') AND PRE_LINE_STATE NOT IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N')       /*12-12-2019 AND LINE_OBJSTATE<>'CANCELLED' AND PRE_LINE_OBJSTATE NOT IN ('CANCELLED','CANCELLED_ATT','CANCELLED_A_N') FOR PO 'P395925' */										   	
										   AND NET_AMOUNT_BASE<>0				
										 	   				                                 
								    ) AS RV
			ON RV.PRE_HISTORY_NO = S.HISTORY_NO
			WHERE S.LINE_NO=RV.LINE_NO
			     AND S.REL_NO=RV.REL_NO
				 AND S.LINE_ITEM_NO=RV.LINE_ITEM_NO


                                       /* STEP 2 : UPDATE THE BACKLOG_AMOUNT OR REVENUE_AMOUNT OF THIS INSERTED PRIOR RECORD  */
				/*  ORDER WAS RELEASED AND LINE HAS NOT BEEN INVOICED, THE VALUE OF MARKET/REGION/DISTRICT/SALESMAN/PLANNED_DELIVERY_DATE NOT MATCH THE PRIOR RECORD - UPDATE BACKLOG_AMOUNT*/
			UPDATE #Snapshot_Message 
			SET BACKLOG_AMOUNT=  -(PRE_NET_AMOUNT_BASE/BUY_QTY_DUE)*(BUY_QTY_DUE-QTY_INVOICED)        
		    WHERE  
			             INSERT_FOR_REVERSAL=1 
			         AND PRE_OBJSTATE NOT IN ('PLANNED','INVOICED') 	                              /*12-13-2019 CHANGED FROM OBJSTATE TO PRE_OBJSTATE*/								
					 AND PRE_LINE_OBJSTATE NOT IN ('INVOICED','CANCELLED')                            /*12-13-2019 CHANGED FROM LINE_OBJSTATE TO PRE_LINE_OBJSTATE*/	
					 AND BUY_QTY_DUE<>0 

				/*  ORDER WAS RELEASED AND LINE WAS INVOICED, THE VALUE OF MARKET/REGION/DISTRICT/SALESMAN/PLANNED_DELIVERY_DATE NOT MATCH THE PRIOR RECORD - UPDATE BACKLOG_AMOUNT */
			UPDATE #Snapshot_Message
			SET BACKLOG_AMOUNT= 0			
		    WHERE  
			             INSERT_FOR_REVERSAL=1 
					 AND PRE_LINE_OBJSTATE ='INVOICED'                                                    /*12-13-2019 CHANGED FROM LINE_OBJSTATE TO PRE_LINE_OBJSTATE*/

				/*  ORDER WAS RELEASED AND LINE WAS INVOICED, THE VALUE OF MARKET/REGION/DISTRICT/SALESMAN/PLANNED_DELIVERY_DATE NOT MATCH THE PRIOR RECORD - UPDATE REVEUNE_AMOUNT */
            UPDATE #Snapshot_Message 
			SET REVENUE_AMOUNT=-(PRE_NET_AMOUNT_BASE/BUY_QTY_DUE)*QTY_INVOICED                         --12-09-2019 CHANGED FROM NET_AMOUNT_BASE TO PRE_NET_AMOUNT_BASE			
		    WHERE  
			             INSERT_FOR_REVERSAL=1 
					 AND PRE_LINE_OBJSTATE ='INVOICED'                                                       /*12-13-2019 CHANGED FROM LINE_OBJSTATE TO PRE_LINE_OBJSTATE*/
					 AND BUY_QTY_DUE<>0 


                              /*END OF SITUATION OF REVERSAL WHEN SALESMAN/MARKET/REGION/DISTRICT/PLANNED_DELIVERY_DATE CHANGED */

                                 /*END OF D. Calculate Backlog_Amount and Revenue_Amount    */            

SELECT * FROM #Snapshot_Message

/*END OF TASK 1*/

/***********************************************************************************************/
/***********************************************************************************************/
               /*    Task2: UPDATE history and snapshot table with process_flags = 'TRUE' based on Temporary table #Snapshot_Message */
         /*  UPDATE THE SNAPSHOT TABLE ONLY */
		 /*
         UPDATE RAW_ORDER_LINE_SNAPSHOT
		 SET REMOVED_FROM_SOURCE=1          /* IT IS PROCESSED AND BUSINESS LOGIC IS CORRECT  */
		 FROM RAW_ORDER_LINE_SNAPSHOT S
		 INNER JOIN #SNAPSHOT_MESSAGE SM
		 ON S.HISTORY_NO=SM.HISTORY_NO
		 WHERE NOT EXISTS ( SELECT REL_NO FROM #SNAPSHOT_MESSAGE SM WHERE S.ORDER_NO=SM.ORDER_NO AND S.HISTORY_NO=SM.HISTORY_NO AND SM.BACKLOG_AMOUNT=-1 AND SM.INSERT_FOR_REVERSAL=0)
	
	     SELECT COUNT(*) FROM RAW_ORDER_LINE_SNAPSHOT S
		 WHERE ORDER_NO=@PO
		       AND REMOVED_FROM_SOURCE=1
			   */
/***********************************************************************************************/
/***********************************************************************************************/
/*    Task3: CREATE A NEW TABLE FROM #Snapshot_Message INCLUDING ONLY THE LEAST COLUMNS OF INSERT_FOR_REVERSAL ,BACKLOG_AMOUNT, REVENUE_AMOUNTN. 
             THIS TABLE ONLY KEEP DATA WHEN THE LINE IS CREATED AND BOOKING AMOUNT (BACKLOG_AMOUNT OR REVENUE_AMOUNT) CHANGES
*/
/*BEGINNING OF Task3*/

IF OBJECT_ID('tempdb..#Esc_Customer_Order_Line_Bookings') IS NOT NULL            
    begin
            drop table #Esc_Customer_Order_Line_Bookings
    end


IF OBJECT_ID('#Esc_Customer_Order_Line_Bookings') IS NULL
BEGIN
    CREATE TABLE #Esc_Customer_Order_Line_Bookings (
		DATA_SOURCE nvarchar(10)
		,OBJVERSION nvarchar(2000) 
		,HISTORY_NO BIGINT not null
		,ORDER_NO nvarchar(12) not null
		,LINE_NO nvarchar(4) not null
		,REL_NO nvarchar(4) not null
		,LINE_ITEM_NO numeric(38,4) not null
		,SITE_LOCAL_DATETIME datetime not null
		,NEXT_SITE_LOCAL_DATETIME datetime
		,BOOKING_DATE date	
		,SALESMAN_CODE nvarchar(20)
		,HISTORY_NO_RANK_SALESMAN int                         /* TO KEEP THE LASTEST HISTORY_NO FOR A SALESMAN_CODE. IT IS THE MOST RECENT WHEN HISTORY_NO_RANK_SALESMAN IS 1  */
		,HISTORY_NO_RANK_LINE int                             /* TO KEEP THE LASTEST HISTORY_NO FOR A LINE_NO IN A DAY. IF THERE ARE TWO SALESMAN RECORDED IN A DAY, AND BOTH BOOKING AMOUNT=0, ONLY KEEP THE LATEST ONE WHOSE HISTORY_NO_RANK_LINE=1*/
		,NEXT_SALESMAN_CODE nvarchar(20)
		,MARKET_CODE nvarchar(10)
		,NEXT_MARKET_CODE nvarchar(10)
		,REGION_CODE nvarchar(10)
		,NEXT_REGION_CODE nvarchar(10)
		,DISTRICT_CODE nvarchar(10)
		,NEXT_DISTRICT_CODE nvarchar(10)
		,PLANNED_DELIVERY_DATE datetime            
		,NEXT_PLANNED_DELIVERY_DATE datetime      
		,OBJSTATE nvarchar(20)
		,ORDER_STATE nvarchar(20)
		,LINE_OBJSTATE nvarchar(20)
		,LINE_HISTORY_ORDER INT
		,INSERT_FOR_REVERSAL numeric(1,0)
		,BUY_QTY_DUE numeric(38,4)
		,QTY_INVOICED numeric(38,4)
		,NET_AMOUNT_BASE numeric(38,4)
		,BACKLOG_AMOUNT numeric(38,4)
		,TOTAL_BACKLOG_AMOUNT_SALESMAN numeric(38,4)
		,TOTAL_BACKLOG_AMOUNT_DAILY numeric(38,4)
		,BACKLOG_BALANCE numeric(38,4)    /* THE SUM(BACKLOG_AMOUNT) FOR THIS LINE_NO */  
		,REVENUE_AMOUNT numeric(38,4)
		,TOTAL_REVENUE_AMOUNT_SALESMAN numeric(38,4)
		,TOTAL_REVENUE_AMOUNT_DAILY numeric (38,4)
		,REVENUE_BALANCE numeric(38,4)    /* THE SUM(REVENUE_AMOUNT) FOR THIS LINE_NO */

	)

   /*ONLY THESE DATA WAS RECORDED: THE LINE IS CREATED, BACKLOG_AMOUNT OR REVENUE_AMOUNT CHANGES */
   INSERT INTO #Esc_Customer_Order_Line_Bookings
   SELECT 
		DATA_SOURCE
		,OBJVERSION
		,HISTORY_NO
		,ORDER_NO
		,LINE_NO
		,REL_NO
		,LINE_ITEM_NO
		,SITE_LOCAL_DATETIME
		,LEAD(SITE_LOCAL_DATETIME,1,DATEADD(d,1,GETDATE())) OVER (PARTITION BY LINE_NO, REL_NO, LINE_ITEM_NO, SALESMAN_CODE,MARKET_CODE,REGION_CODE,DISTRICT_CODE,PLANNED_DELIVERY_DATE ORDER BY OBJVERSION, HISTORY_NO) 	/* 2/28/2020: ADDED HISTORY_NO TO ORDER BY */	
		,BOOKING_DATE	
		,SALESMAN_CODE
		,RANK() OVER(PARTITION BY LINE_NO, REL_NO, LINE_ITEM_NO, BOOKING_DATE, SALESMAN_CODE,MARKET_CODE, REGION_CODE,DISTRICT_CODE, PLANNED_DELIVERY_DATE ORDER BY OBJVERSION DESC, HISTORY_NO DESC)   /* TO KEEP THE LASTEST OBJVERSION FOR A SALESMAN_CODE IN A DAY  */
		,RANK() OVER(PARTITION BY LINE_NO, REL_NO, LINE_ITEM_NO, BOOKING_DATE ORDER BY OBJVERSION DESC, HISTORY_NO DESC) /*TO GET THE LATEST HISTORY_NO FOR THE ACTIVITIES OF A LINE IN A DAY*/
		,LEAD(SALESMAN_CODE,1,'-0') OVER (PARTITION BY LINE_NO, REL_NO, LINE_ITEM_NO ORDER BY OBJVERSION, HISTORY_NO)   
		,MARKET_CODE
		,LEAD(MARKET_CODE,1,'-0') OVER (PARTITION BY LINE_NO, REL_NO, LINE_ITEM_NO ORDER BY OBJVERSION, HISTORY_NO)     
		,REGION_CODE
		,LEAD(REGION_CODE,1,'-0') OVER (PARTITION BY LINE_NO, REL_NO, LINE_ITEM_NO ORDER BY OBJVERSION, HISTORY_NO)     
		,DISTRICT_CODE
		,LEAD(DISTRICT_CODE,1,'-0') OVER (PARTITION BY LINE_NO, REL_NO, LINE_ITEM_NO ORDER BY OBJVERSION, HISTORY_NO)  
		,PLANNED_DELIVERY_DATE       
		,LEAD(PLANNED_DELIVERY_DATE,1,DATEADD(YEAR,100,GETDATE())) OVER (PARTITION BY LINE_NO, REL_NO, LINE_ITEM_NO ORDER BY OBJVERSION, HISTORY_NO)  				 
		,OBJSTATE
		,ORDER_STATE 
		,LINE_OBJSTATE
		,LINE_HISTORY_ORDER
		,INSERT_FOR_REVERSAL 
		,BUY_QTY_DUE
		,QTY_INVOICED    
		,NET_AMOUNT_BASE 
		,BACKLOG_AMOUNT
		,SUM(BACKLOG_AMOUNT) OVER(PARTITION BY LINE_NO,REL_NO,LINE_ITEM_NO,SALESMAN_CODE,MARKET_CODE, REGION_CODE,DISTRICT_CODE, PLANNED_DELIVERY_DATE, BOOKING_DATE ORDER BY SALESMAN_CODE,BOOKING_DATE)
		,SUM(BACKLOG_AMOUNT) OVER(PARTITION BY LINE_NO,REL_NO,LINE_ITEM_NO,BOOKING_DATE ORDER BY BOOKING_DATE)
		,SUM(BACKLOG_AMOUNT) OVER(PARTITION BY LINE_NO,REL_NO,LINE_ITEM_NO ORDER BY BOOKING_DATE, OBJVERSION, HISTORY_NO ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)  /* 2020-03-04 REVISED. BALANCE OF BACKLOG_AMOUNT FROM ALL ABOVE*/
		,REVENUE_AMOUNT 
		,SUM(REVENUE_AMOUNT) OVER(PARTITION BY LINE_NO,REL_NO,LINE_ITEM_NO,SALESMAN_CODE,MARKET_CODE, REGION_CODE,DISTRICT_CODE, PLANNED_DELIVERY_DATE, BOOKING_DATE ORDER BY SALESMAN_CODE,BOOKING_DATE)
		,SUM(REVENUE_AMOUNT) OVER(PARTITION BY LINE_NO,REL_NO,LINE_ITEM_NO,BOOKING_DATE ORDER BY BOOKING_DATE)
		,SUM(REVENUE_AMOUNT) OVER(PARTITION BY LINE_NO,REL_NO,LINE_ITEM_NO ORDER BY BOOKING_DATE, OBJVERSION, HISTORY_NO ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)  /* 2020-03-04 REVISED. BALANCE OF REVENE_AMOUNT FROM ALL ABOVE*/
		FROM #Snapshot_Message SM
		WHERE 
			  (OBJSTATE='Planned' AND PRE_LINE_STATE='0')
			  OR (PRE_ORDER_STATE IN ('BACKLOG','PLANNED') AND LINE_OBJSTATE='INVOICED' AND QTY_INVOICED<>PRE_QTY_INVOICED AND NET_AMOUNT_BASE=0  )   /*IF NET_AMOUNT_BASE =0, THIS LINE WAS INVOICED AS 0. BUT FACT TABLE SHALL SHOW THE INVOICE AMOUNT INSTEAD OF PLANNED AMOUNT, EVEN THOUGH THE REVENUE_AMOUNT =0 */
			  OR (ORDER_STATE ='BACKLOG' AND PRE_ORDER_STATE='PLANNED' AND NET_AMOUNT_BASE=0) /*IF NET_AMOUNT_BASE =0, THIS LINE WAS RELEASED AS 0. BUT FACT TABLE SHALL SHOW THE RELEASED AMOUNT INSTEAD OF PLANNED AMOUNT, EVEN THOUGH THE REVENUE_AMOUNT =0 */
			  OR (ORDER_STATE ='BACKLOG' AND PRE_ORDER_STATE='BACKLOG' AND LINE_OBJSTATE NOT IN ('CANCELLED','INVOICED') AND QTY_INVOICED<>PRE_QTY_INVOICED AND NET_AMOUNT_BASE=0) /*SHOW THE ROW WHEN PARTIALLY DELIVERED INVOICED =0 */
			  OR (LINE_OBJSTATE='INVOICED' AND QTY_INVOICED=PRE_QTY_INVOICED AND BUY_QTY_DUE<>PRE_BUY_QTY_DUE AND PRE_NET_AMOUNT_BASE=0 )  /*LINE HAS NET_AMOUNT_BASE =0 AND IT WAS PARTIALLY DELIVERED AND INVOICED BUT THE REMAINING QTY CHANGED TO 0 */
			  OR (LINE_OBJSTATE='CANCELLED' AND PRE_LINE_OBJSTATE NOT IN ('CANCELLED','0') AND NET_AMOUNT_BASE=0) /*LINE IS CANCELLED AS NET_AMOUNT_BASE=0*/
			  OR (LINE_OBJSTATE='CANCELLED' AND PRE_LINE_OBJSTATE NOT IN ('CANCELLED','0') AND PRE_ORDER_STATE='PLANNED' AND CAST(SITE_LOCAL_DATETIME AS DATE)=CAST(PRE_SITE_LOCAL_DATETIME AS DATE)) /*LINE IS CANCELLED AT THE SAME DAY OF 'PLANNED'*/
			  OR (LINE_OBJSTATE NOT IN ('CANCELLED','INVOICED') AND PRE_LINE_OBJSTATE='0' AND WAS_ORDER_PLANNED='Y' AND NET_AMOUNT_BASE=0) /*LINE IS RELEASED AFTER THE ORDER WAS RELEASED AND IT IS THE FIRST TIME RELEASE AND NET_AMOUNT_BASE=0*/
			  OR BACKLOG_AMOUNT<> 0
			  OR REVENUE_AMOUNT<> 0

    

   SELECT * FROM #Esc_Customer_Order_Line_Bookings ORDER BY LINE_NO, REL_NO, LINE_ITEM_NO,SITE_LOCAL_DATETIME

/*DELETE THE ROW WHOSE OBJSTATE='PLANNED' AND LINE_OBJSTATE='CANCELLED' */
	DELETE 
	FROM #Esc_Customer_Order_Line_Bookings
	WHERE OBJSTATE='PLANNED' AND LINE_OBJSTATE='CANCELLED'

/*REVISED ON 2/28/2020: ONLY ONE ROW FOR A SALESMAN IS RECORDED TO FACT TABLE EACH DAY, SO DELETE THE NON-CURRENT DATA IN A DAY */
	DELETE 
	FROM #Esc_Customer_Order_Line_Bookings
	WHERE convert(date,SITE_LOCAL_DATETIME)=convert(date,NEXT_SITE_LOCAL_DATETIME)
	      AND SALESMAN_CODE=NEXT_SALESMAN_CODE AND MARKET_CODE=NEXT_MARKET_CODE AND REGION_CODE=NEXT_REGION_CODE AND DISTRICT_CODE=NEXT_DISTRICT_CODE AND PLANNED_DELIVERY_DATE=NEXT_PLANNED_DELIVERY_DATE
		  AND (HISTORY_NO_RANK_SALESMAN<>1 OR HISTORY_NO_RANK_LINE <>1 )   -- ADDED ON 2/28/2020
		  
    DELETE 
	FROM #Esc_Customer_Order_Line_Bookings
	WHERE convert(date,SITE_LOCAL_DATETIME)=convert(date,NEXT_SITE_LOCAL_DATETIME)
	      AND SALESMAN_CODE<>NEXT_SALESMAN_CODE
		  AND BACKLOG_AMOUNT=0 AND REVENUE_AMOUNT=0
		  AND NET_AMOUNT_BASE<>0  

/*DELETE THE FIRST DATA IF THE SALESMAN IS NOT ASSIGNED IN THE BEGINNING AND THEN IT IS ASSIGNED LATER IN THE SAME DAY*/
	DELETE 
	FROM #Esc_Customer_Order_Line_Bookings
	WHERE convert(date,SITE_LOCAL_DATETIME)=convert(date,NEXT_SITE_LOCAL_DATETIME)
	      AND SALESMAN_CODE='-1'  /* SALESMAN_CODE='-1' MEANS THE SALESMAN IS NOT ASSIGNED YET  */

/*DELETE NON-LASTEST DATA FOR A SALESMAN IN A DAY*/
	DELETE 
	FROM #Esc_Customer_Order_Line_Bookings
	WHERE HISTORY_NO_RANK_SALESMAN<>1

/*DELETE THE DATA WHEN THE SALESMAN HAS TOTAL_BACKLOG_AMOUNT_SALESMAN=0 & TOTAL_REVENUE_AMOUNT_SALESMAN=0 IN THE SAME DAY AFTER THE LINE IS RELEASED */
	DELETE 
	FROM #Esc_Customer_Order_Line_Bookings
	WHERE  OBJSTATE<>'PLANNED'
	       AND TOTAL_BACKLOG_AMOUNT_SALESMAN=0 AND TOTAL_REVENUE_AMOUNT_SALESMAN=0
		   AND (BACKLOG_AMOUNT<>0 OR REVENUE_AMOUNT<>0)   
	       AND NET_AMOUNT_BASE<>0 

/*DELETE THE DATA WHEN THE SALESMAN HAS TOTAL_BACKLOG_AMOUNT_SALESMAN_DAILY=0 & TOTAL_REVENUE_AMOUNT_SALESMAN_DAILY=0 BUT TOTAL_BACKLOG_AMOUNT_DAILY <>0 OR TOTAL_REVENUE_AMOUTN_DAILY<>0 IN THE SAME DAY AFTER THE LINE IS RELEASED */
	DELETE 
	FROM #Esc_Customer_Order_Line_Bookings
	WHERE  HISTORY_NO_RANK_SALESMAN=1
	       AND TOTAL_BACKLOG_AMOUNT_SALESMAN=0 
	       AND TOTAL_REVENUE_AMOUNT_SALESMAN=0
		   AND (TOTAL_BACKLOG_AMOUNT_DAILY<>0 OR TOTAL_REVENUE_AMOUNT_DAILY<>0 )


/*DELETE THE DATA WHEN THE SALESMAN HAS TOTAL_BACKLOG_AMOUNT_SALESMAN_DAILY=0 & TOTAL_REVENUE_AMOUNT_SALESMAN_DAILY=0 AND TOTAL_BACKLOG_AMOUNT_DAILY =0 & TOTAL_REVENUE_AMOUTN_DAILY=0 IN THE SAME DAY AFTER THE LINE IS RELEASED */
	DELETE 
	FROM #Esc_Customer_Order_Line_Bookings
	WHERE  HISTORY_NO_RANK_SALESMAN=1
	       AND (TOTAL_BACKLOG_AMOUNT_SALESMAN=0 AND TOTAL_REVENUE_AMOUNT_SALESMAN=0)
		   AND (TOTAL_BACKLOG_AMOUNT_DAILY=0 AND TOTAL_REVENUE_AMOUNT_DAILY=0 )
		   AND (BACKLOG_AMOUNT<>0 OR REVENUE_AMOUNT<>0)

/* DELETE THE DATA WHEN A LINE HAS TOTAL_BACKLOG_AMOUNT_SALESMAN=0 & TOTAL_REVENUE_AMOUNT_SALESMAN=0 AND TOTAL_BACKLOG_AMOUNT_DAILY =0 & TOTAL_REVENUE_AMOUTN_DAILY=0  AND HISTORY_NO_RANK_SALESMAN=1 AND HISTORY_NO_RANK_LINE<>1  */
	DELETE 
	FROM #Esc_Customer_Order_Line_Bookings
	WHERE  HISTORY_NO_RANK_SALESMAN=1 AND HISTORY_NO_RANK_LINE<>1
	       AND (TOTAL_BACKLOG_AMOUNT_SALESMAN=0 AND TOTAL_REVENUE_AMOUNT_SALESMAN=0)
		   AND (TOTAL_BACKLOG_AMOUNT_DAILY=0 AND TOTAL_REVENUE_AMOUNT_DAILY=0 )		  


/* 12-12-2019 ADDED: TO DELETE THE RECORD WHOSE NET_AMOUNT_BASE=0 AND THIS LINE WAS CANCELLED IF ORDER WAS RELEASED IN THE SAME DAY SO IT WILL NOT BE INSERTED TO FACT TABLE  */
/* DELETE THE ROW WHOSE OBJSTATE='CANCELLED' OR LINE_OBJSTATE='CANCELLED' , NET_AMOUNT_BASE=0 AND THERE IS ONLY ONE ROW IN THIS TEMP TABLE - THIS LINE WAS CANCELLED IF ORDER WAS RELEASED IN THE SAME DAY SO IT WILL NOT BE INSERTED TO FACT TABLE*/
	DELETE
	FROM #Esc_Customer_Order_Line_Bookings
	WHERE (OBJSTATE='CANCELLED' OR LINE_OBJSTATE='CANCELLED') 
	      AND HISTORY_NO IN
		  (
		                    SELECT a.HISTORY_NO
							FROM #Esc_Customer_Order_Line_Bookings as a
							INNER JOIN
								(
									SELECT LINE_NO, REL_NO, LINE_ITEM_NO, COUNT(*) AS LINE_COUNT
									FROM #Esc_Customer_Order_Line_Bookings
									GROUP BY LINE_NO, REL_NO, LINE_ITEM_NO
									HAVING COUNT(*)=1
								)  AS b
								ON a.LINE_NO = b.LINE_NO
								AND a.REL_NO = b.REL_NO
								AND a.LINE_ITEM_NO=b.LINE_ITEM_NO
							WHERE a.OBJSTATE='CANCELLED' OR a.LINE_OBJSTATE='CANCELLED'
		  )

		  SELECT DATA_SOURCE, OBJVERSION, HISTORY_NO, ORDER_NO, LINE_NO,REL_NO,LINE_ITEM_NO,SITE_LOCAL_DATETIME,BOOKING_DATE,SALESMAN_CODE,MARKET_CODE,REGION_CODE,DISTRICT_CODE, PLANNED_DELIVERY_DATE, OBJSTATE, ORDER_STATE, LINE_OBJSTATE,LINE_HISTORY_ORDER,  INSERT_FOR_REVERSAL,BUY_QTY_DUE, QTY_INVOICED, NET_AMOUNT_BASE,TOTAL_BACKLOG_AMOUNT_SALESMAN, BACKLOG_BALANCE, TOTAL_REVENUE_AMOUNT_SALESMAN, REVENUE_BALANCE FROM #Esc_Customer_Order_Line_Bookings ORDER BY LINE_NO, REL_NO, LINE_ITEM_NO,SITE_LOCAL_DATETIME

/* CREATE INTERMED TEST TABLE - IFSAppl_INTERMED_CUSTOMER_ORDER_lINE_BOOKINGS_TEST  */

	IF OBJECT_ID('IFSAppl_INTERMED_CUSTOMER_ORDER_LINE_BOOKINGS_TEST') IS NOT NULL                 
    begin
            drop table [dbo].[IFSAppl_INTERMED_CUSTOMER_ORDER_LINE_BOOKINGS_TEST]
    end

    CREATE TABLE  IFSAppl_INTERMED_CUSTOMER_ORDER_LINE_BOOKINGS_TEST 
						 (
						        
		        				[DATA_SOURCE] [nvarchar](10) NULL,				
								[OBJVERSION] [nvarchar](2000) NULL,
								[HISTORY_NO] BIGINT NULL,
								[ORDER_NO] [nvarchar](12) NULL,
								[LINE_NO] [nvarchar](4) NULL,
								[REL_NO] [nvarchar](4) NULL,
								[LINE_ITEM_NO] [numeric](38, 4) NULL,
								[SITE_LOCAL_DATETIME] [datetime] NULL,
								[BOOKING_DATE] [date] NULL,								
								[SALESMAN_CODE] [nvarchar](20) NULL,
								[MARKET_CODE] [nvarchar](10) NULL,
								[REGION_CODE] [nvarchar](10) NULL,
								[DISTRICT_CODE] [nvarchar](10) NULL,
								[PLANNED_DELIVERY_DATE] [datetime] NULL,   
								[OBJSTATE] [nvarchar](20) NULL,
								[ORDER_STATE] [nvarchar](20) NULL,        /*ADDED TO FACT TABLE*/
								[LINE_OBJSTATE] [nvarchar](20) NULL,								 
								[INSERT_FOR_REVERSAL] [Int] NULL,		
								[BUY_QTY_DUE] [numeric](38,4) NULL,
                                [QTY_INVOICED] [numeric](38,4) NULL,						
								[NET_AMOUNT_BASE] [numeric](38, 4) NULL,
								[BACKLOG_AMOUNT] [numeric](38, 4) NULL,     /*USE COLUMN OF TOTAL_BACKLOG_AMOUNT_SALESMAN  */
								[REVENUE_AMOUNT] [numeric](38, 4) NULL,		/*USE COLUMN OF TOTAL_REVENUE_AMOUNT_SALESMAN  */		 
		                        [BACKLOG_BALANCE] [numeric](38, 4) NULL,    /* USE COLUMN OF BACKLOG_BALANCE  */
								[REVENUE_BALANCE] [numeric](38, 4) NULL,	/* USE COLUMN OF REVENUE_BALANCE  */	
								
								[ROW_ACTION] INT                           /*USED TO IDENTIFY THE DUPLICATE RECORD - '1' AS DEFAULT AND IT MEANS IT MATCH #Esc_Customer_Order_Line_Bookings, NO CHANGE; '2' MEANS IT IS NOT FOUND IN #Esc_Customer_Order_Line_Bookings, THIS ROW NEEDS DELETE LATER FROM FACT TABLE*/	
								
								
												  				
								/*
								[LINE_ID] [nvarchar](50) NOT NULL,
								[ORDER_NO] [nvarchar](12) NOT NULL,
								[LINE_NO] [nvarchar](4) NOT NULL,
								[REL_NO] [nvarchar](4) NOT NULL,
								[LINE_ITEM_NO] [numeric](38, 4) NOT NULL,
								[HISTORY_NO] [BIGINT]  NOT NULL,
								[INSERT_FOR_REVERSAL] [int] NOT NULL,
								[SALES_QTY] [numeric](38, 4) NOT NULL,
								[QTY_ASSIGNED] [numeric](38, 4) NOT NULL,
								[QTY_PICKED] [numeric](38, 4) NOT NULL,
								[QTY_SHORT] [numeric](38, 4) NOT NULL,
								[QTY_SHIPPED] [numeric](38, 4) NOT NULL,
								[QTY_SHIPDIFF] [numeric](38, 4) NOT NULL,
								[QTY_RETURNED] [numeric](38, 4) NOT NULL,
								[QTY_INVOICED] [numeric](38, 4) NOT NULL,
								[BACKLOG_AMOUNT] [numeric](38, 4) NULL,       --USE B.[TOTAL_BACKLOG_AMOUNT_SALESMAN] NOT [BACKLOG_AMOUNT]
								--[BACKLOG_BALANCE] [numeric](38, 4) NULL,    /*NEWLY ADDED, NEED CONFIRM WITH ROSS*/
								[REVENUE_AMOUNT] [numeric](38, 4) NULL,       --USE B.[TOTAL_REVENUE_AMOUNT_SALESMAN] NOT [REVENUE_AMOUNT]
								--[REVENUE_BALANCE] [numeric](38, 4) NULL,    /*NEWLY ADDED, NEED CONFIRM WITH ROSS*/
								[TRANSACTION_DATE] [datetime] NULL,
								[BASE_SALE_UNIT_PRICE] [numeric](38, 4) NOT NULL,
								--[BASE_SAL_PRICE_INCL_TAX] [numeric](38, 4) NULL,
								[NET_AMOUNT_IN_BASE] [numeric](38, 4) NULL,
								--[GROSS_AMOUNT_IN_BASE] [numeric](38, 4) NULL,
								[COST_PER_UNIT] [numeric](38, 4) NOT NULL,
								--[TOTAL_ORDER_LINE_DISCOUNT] [numeric](38, 4) NULL,
								[STATE] [nvarchar](4000) NULL,
								[INVOICE_BLOCKED] [nvarchar](20) NOT NULL,
								[INVOICE_BLOCKED_DESC] [nvarchar](4000) NULL,
								[SUPPLY_CODE] [nvarchar](3) NOT NULL,
								[SUPPLY_CODE_DESC] [nvarchar](4000) NULL,
								[CONVERSION_FACTOR] [numeric](38, 4) NOT NULL,
								[PRICE_SOURCE] [nvarchar](25) NOT NULL,
								[PRICE_SOURCE_DESC] [nvarchar](4000) NULL,
								[PRICE_SOURCE_ID] [nvarchar](25) NULL,
								[SALES_UNIT_MEAS] [nvarchar](10) NOT NULL,
								[PRICE_CONV_FACTOR] [numeric](38, 4) NOT NULL,
								[CUSTOMER_CURRENCY] [nvarchar](3) NOT NULL,
								[CURRENCY_RATE] [numeric](38, 4) NULL,
								[WANTED_DELIVERY_DATE] [datetime] NOT NULL,
								[PLANNED_DELIVERY_DATE] [datetime] NOT NULL,
								[PROMISED_DELIVERY_DATE] [datetime] NOT NULL,
								[PLANNED_SHIP_DATE] [datetime] NOT NULL,
								[PRICE_EFFECTIVITY_DATE] [datetime] NULL,
								[PLANNED_DUE_DATE] [datetime] NOT NULL,
								[FIRST_ACTUAL_SHIP_DATE] [datetime] NULL,
								[REAL_SHIP_DATE] [datetime] NULL,
								[CREATED_DATE] [datetime] NULL,
								[PAY_TAX] [nvarchar](1) NOT NULL,
								[PAY_TAX_DESC] [nvarchar](4000) NULL,
								[FEE_CODE] [nvarchar](20) NULL,
								--[FEE_CODE_DESC] [nvarchar](4000) NULL,
								[CUSTOMER_PART_NO] [nvarchar](45) NULL,
								[DEMAND_CODE] [nvarchar](20) NULL,
								[DEMAND_CODE_DESC] [nvarchar](4000) NULL,
								[DISCOUNT] [numeric](38, 4) NOT NULL,
								[ORDER_DISCOUNT] [numeric](38, 4) NOT NULL,
								[ADDITIONAL_DISCOUNT] [numeric](38, 4) NULL,
								[ROUTE_ID] [nvarchar](12) NULL,
								[PRICE_LIST_NO] [nvarchar](10) NULL,
								[DIM_SITE_ID] [nvarchar](5) NOT NULL,
								[DIM_CUSTOMER_ID] [nvarchar](20) NOT NULL,
								[DIM_SUPPLIER_ID] [nvarchar](20) NULL,
								[DIM_SALES_PART_ID] [nvarchar](31) NULL,
								[DIM_INVENTORY_PART_ID] [nvarchar](31) NULL,
								[DIM_ORDER_CANCEL_REASON_ID] [nvarchar](10) NULL,
								[DIM_SHIP_VIA_ID] [nvarchar](3) NULL,
								[DIM_DELIVERY_TERM_ID] [nvarchar](3) NULL,
								[DIM_PROJECT_ID] [nvarchar](10) NULL,
								[DIM_ACTIVITY_ID] [numeric](38, 4) NULL,
								--[TOTAL_COST] [numeric](38, 4) NULL,
								[DIM_SALES_REGION_ID] [nvarchar](10) NULL,
								[DIM_SALES_PERSON_ID] [nvarchar](20) NULL,
								[DIM_SALES_DISTRICT_ID] [nvarchar](10) NULL,
								[DIM_SALES_MARKET_ID] [nvarchar](10) NULL,
								--[ACCOUNTING_YEAR] [numeric](4, 0) NULL,
								--[ACCOUNTING_PERIOD] [numeric](2, 0) NULL,
								[DIM_CUST_ORDER_TYPE_ID] [nvarchar](3) NULL,
								[DIM_CONFIGURATION_ID] [nvarchar](76) NULL,
								[DIM_CONDITION_CODE_ID] [nvarchar](10) NULL,
								--[DIM_CUSTOMER_NO_CREDIT_ID] [nvarchar](20) NULL,
								--[COMPANY] [nvarchar](20) NULL,
								[CUSTOMER_PO_NO] [nvarchar](50) NULL,
								[CUSTOMER_NO_PAY] [nvarchar](20) NULL,
								--[DIM_DELIVERY_TYPE_ID] [nvarchar](3) NULL,
								[ROW_ACTION] INT                           /*USED TO IDENTIFY THE DUPLICATE RECORD - '1' AS DEFAULT AND IT MEANS IT MATCH #Esc_Customer_Order_Line_Bookings, NO CHANGE; '2' MEANS IT IS NOT FOUND IN #Esc_Customer_Order_Line_Bookings, THIS ROW NEEDS DELETE LATER FROM FACT TABLE*/									
								--[Modified_By_User] [nvarchar](100) NULL,
								--[Last_Loaded] [datetime] NULL

								*/
								)

INSERT INTO IFSAppl_INTERMED_CUSTOMER_ORDER_LINE_BOOKINGS_TEST
					   SELECT  DATA_SOURCE,OBJVERSION, HISTORY_NO, ORDER_NO, LINE_NO,REL_NO,LINE_ITEM_NO,SITE_LOCAL_DATETIME,BOOKING_DATE,SALESMAN_CODE,MARKET_CODE,REGION_CODE,DISTRICT_CODE, PLANNED_DELIVERY_DATE, OBJSTATE,ORDER_STATE, LINE_OBJSTATE, INSERT_FOR_REVERSAL, BUY_QTY_DUE, QTY_INVOICED, NET_AMOUNT_BASE,TOTAL_BACKLOG_AMOUNT_SALESMAN,TOTAL_REVENUE_AMOUNT_SALESMAN, BACKLOG_BALANCE, REVENUE_BALANCE,1
					   FROM #Esc_Customer_Order_Line_Bookings LB
					   ORDER BY LINE_NO, REL_NO, LINE_ITEM_NO, SITE_LOCAL_DATETIME
					   
					   			/*							  
INSERT INTO IFSAppl_INTERMED_CUSTOMER_ORDER_LINE_BOOKINGS_TEST
SELECT 

                                 
								 CONCAT(B.[ORDER_NO],'^',B.[LINE_NO],'^',B.[REL_NO],'^',CAST(CAST(B.[LINE_ITEM_NO] AS INT) AS NVARCHAR(12)),'^',CAST(B.[HISTORY_NO] AS NVARCHAR(12)),'^',CAST(B.[INSERT_FOR_REVERSAL] AS NVARCHAR(1)))           -- [LINE_ID]   
								  ,B.[ORDER_NO]
								  ,B.[LINE_NO]
								  ,B.[REL_NO]
								  ,B.[LINE_ITEM_NO]
								  ,B.[HISTORY_NO]
								  ,B.[INSERT_FOR_REVERSAL]
								  ,S.[BUY_QTY_DUE]                     --[SALES_QTY] IN FACT TABLE
								  ,S.[QTY_ASSIGNED]
								  ,S.[QTY_PICKED]
								  ,S.[QTY_SHORT]
								  ,S.[QTY_SHIPPED]
								  ,S.[QTY_SHIPDIFF]
								  ,S.[QTY_RETURNED]
								  ,S.[QTY_INVOICED]
								  ,B.[TOTAL_BACKLOG_AMOUNT_SALESMAN]
								  --,B.[BACKLOG_BALANCE]
								  ,B.[TOTAL_REVENUE_AMOUNT_SALESMAN]
								  --,B.[REVENUE_BALANCE]
								  ,B.[SITE_LOCAL_DATETIME]             -- [TRANSACTION_DATE] IN FACT TABLE
								  ,S.[BASE_SALE_UNIT_PRICE]   
								  --,[BASE_SAL_PRICE_INCL_TAX]           -- NOT IN SNAPSHOT
								  ,S.[NET_AMOUNT_BASE]                 -- [NET_AMOUNT_IN_BASE]
								  --,[GROSS_AMOUNT_IN_BASE]              -- NOT IN SNAPSHOT
								  ,S.[COST]                            -- [COST_PER_UNIT]
								  --,[TOTAL_ORDER_LINE_DISCOUNT]         -- NOT IN SNAPSHOT
								  ,S.[STATE]
								  ,S.[BLOCKED_FOR_INVOICING_DB]        -- [INVOICE_BLOCKED]
								  ,S.[BLOCKED_FOR_INVOICING]           -- [INVOICE_BLOCKED_DESC]
								  ,S.[SUPPLY_CODE_DB]                  -- [SUPPLY_CODE] 
								  ,S.[SUPPLY_CODE]                     -- [SUPPLY_CODE_DESC]
								  ,S.[CONV_FACTOR]                     -- [CONVERSION_FACTOR]
								  ,S.[PRICE_SOURCE_DB]                 -- [PRICE_SOURCE]
								  ,S.[PRICE_SOURCE]                    -- [PRICE_SOURCE_DESC]
								  ,S.[PRICE_SOURCE_ID]
								  ,S.[SALES_UNIT_MEAS]
								  ,S.[PRICE_CONV_FACTOR]
								  ,S.[CURRENCY_CODE]                   -- [CUSTOMER_CURRENCY]
								  ,S.[CURRENCY_RATE]
								  ,S.[WANTED_DELIVERY_DATE]
								  ,S.[PLANNED_DELIVERY_DATE]
								  ,S.[PROMISED_DELIVERY_DATE]
								  ,S.[PLANNED_SHIP_DATE]
								  ,S.[PRICE_EFFECTIVITY_DATE]
								  ,S.[PLANNED_DUE_DATE]
								  ,S.[FIRST_ACTUAL_SHIP_DATE]
								  ,S.[REAL_SHIP_DATE]
								  ,S.[DATE_ENTERED]                    -- [CREATED_DATE]
								  ,S.[VAT_DB]                          -- [PAY_TAX]
								  ,S.[VAT]                             -- [PAY_TAX_DESC]
								  ,S.[FEE_CODE]
								  --,[FEE_CODE_DESC]                     -- NOT IN SNAPSHOT
								  ,S.[CUSTOMER_PART_NO]
								  ,S.[DEMAND_CODE_DB]                  -- [DEMAND_CODE]
								  ,S.[DEMAND_CODE]                     -- [DEMAND_CODE_DESC]
								  ,S.[DISCOUNT]
								  ,S.[ORDER_DISCOUNT]
								  ,S.[ADDITIONAL_DISCOUNT]
								  ,S.[ROUTE_ID]
								  ,S.[PRICE_LIST_NO]
								  ,S.[CONTRACT]                        -- [DIM_SITE_ID]
								  ,S.[CUSTOMER_NO]                     -- [DIM_CUSTOMER_ID]
								  ,ISNULL(S.[VENDOR_NO],'#')           -- [DIM_SUPPLIER_ID]
								  ,CONCAT(S.[CONTRACT],'^',S.[CATALOG_NO])                -- [DIM_SALES_PART_ID]
								  ,CONCAT(S.[CONTRACT],'^',ISNULL(S.[PART_NO],'#'))       -- [DIM_INVENTORY_PART_ID] 
								  ,S.[CANCEL_REASON]                                      -- [DIM_ORDER_CANCEL_REASON_ID]
								  ,ISNULL(S.[SHIP_VIA_CODE],'#')                          -- [DIM_SHIP_VIA_ID]
								  ,ISNULL(S.[DELIVERY_TERMS],'#')                         -- [DIM_DELIVERY_TERM_ID]
								  ,ISNULL(S.[PROJECT_ID],'#')                             -- [DIM_PROJECT_ID]
								  ,ISNULL(S.[ACTIVITY_SEQ],0)                             -- [DIM_ACTIVITY_ID]
     
								  /*IN API*/
								 --,[TOTAL_COST]                          -- NOT IN SNAPSHOT
								  ,S.[REGION_CODE]                    -- [DIM_SALES_REGION_ID]
								  ,S.[SALESMAN_CODE]                  -- [DIM_SALES_PERSON_ID]
								  ,S.[DISTRICT_CODE]                  -- [DIM_SALES_DISTRICT_ID]
								  ,S.[MARKET_CODE]                    -- [DIM_SALES_MARKET_ID]
								  --,[ACCOUNTING_YEAR]                    -- NOT IN SNAPSHOT
								  --,[ACCOUNTING_PERIOD]                  -- NOT IN SNAPSHOT
								  ,S.[ORDER_ID]                         -- [DIM_CUST_ORDER_TYPE_ID]
								  ,S.[CONFIGURATION_ID]                 -- [DIM_CONFIGURATION_ID]
								  ,S.[CONDITION_CODE]                   -- [DIM_CONDITION_CODE_ID]
								  --,[DIM_CUSTOMER_NO_CREDIT_ID]          -- NOT IN SNAPSHOT
								  --,[COMPANY]                            -- NOT IN SNAPSHOT
								  ,S.[CUSTOMER_PO_NO]                   -- [CUSTOMER_PO_NO] SAME AS SNAPSHOT
								  ,S.[CUSTOMER_NO_PAY]                  -- [CUSTOMER_NO_PAY] SAME AS SNAPSHOT  
								  --,[DIM_DELIVERY_TYPE_ID]               -- NOT IN SNAPSHOT
								  ,1                                    -- 1 AS DEFAULT, 2 MEANS THIS RECORD NEED DELETING
								  --,CAST(SYSTEM_USER AS NVARCHAR(100))   -- [Modified_By_User]
								  --,GETDATE()                            -- [Last_Loaded]

								  

FROM #Esc_Customer_Order_Line_Bookings B
LEFT JOIN RAW_ORDER_LINE_SNAPSHOT S
ON B.ORDER_NO=S.ORDER_NO
AND B.LINE_NO=S.LINE_NO
AND B.REL_NO=S.REL_NO
AND B.LINE_ITEM_NO=S.LINE_ITEM_NO
AND B.HISTORY_NO=S.HISTORY_NO 

ORDER BY LINE_NO, REL_NO, LINE_ITEM_NO, SITE_LOCAL_DATETIME
                                */

SELECT * FROM IFSAppl_INTERMED_CUSTOMER_ORDER_LINE_BOOKINGS_TEST



END
/*END OF TASK 3*/

/*
             /********************************************************************************************************/    
             /**Task4: IF SOME SITUATIONS NEED RAISE THE ATTENTION FROM BUSINESS AND LET THEM CORRECT THEIR PRACTICE**/
             /**THIS ORDER_NO WILL BE SENT TO A TABLE CALLED EXCEPTIONS***********************************************/

/*BEGINNING OF Task4*/

/*BEGIN OF EXCEPTION- 1 : EXCEPTION_TYPE='OPEN_BACKLOG_ON_INVOICED_ORDER'*/
/*IF A ORDER_NO HAS A LINE_NO WHOSE QTY_INVOICED < BUY_QTY_DUE WHILE THE ORDER_STATE='INVOICED', WHICH MEANS A LINE_NO STILL HAS OUTSTANDING BACKLOG WHEN THE ORDER WAS CLOSED.*/

IF EXISTS (  SELECT HISTORY_NO FROM #Esc_Customer_Order_Line_Bookings  LB
             WHERE ORDER_STATE='INVOICED'
		   )
	AND   (  SELECT ABS(SUM(TOTAL_BACKLOG_AMOUNT_SALESMAN))
	         FROM  #Esc_Customer_Order_Line_Bookings  LB
	       )>1

BEGIN
		IF OBJECT_ID('DBO.EXCEPTIONS') IS  NULL                  
			begin
				   CREATE TABLE  EXCEPTION 
								 (
						                [ROWID] [nvarchar](50) NOT NULL,
										[DATA_SOURCE] [nvarchar](10) NULL,
										[HISTORY_NO] [bigint] NULL,
										[FETCH_DATE] [datetime] NULL,
										[REC_DATE] [datetime] NULL,
										[REC_STATUS] [nvarchar](20) NULL,
										[ORDER_NO] [nvarchar](12) NULL,
										[LINE_NO] [nvarchar](4) NULL,
										[REL_NO] [nvarchar](4) NULL,
										[LINE_ITEM_NO] [int] NULL,
										[AUTHORIZE_CODE] [nvarchar](20) NULL,
										[CONTRACT] [nvarchar](5) NULL,
										[CUSTOMER_NO] [nvarchar](20) NULL,
										[CUSTOMER_NAME] [nvarchar](100) NULL,
										[CUSTOMER_NO_PAY] [nvarchar](20) NULL,
										[CUSTOMER_PO_NO] [nvarchar](50) NULL,
										[DEFAULT_ADDR_FLAG] [nvarchar](4000) NULL,
										[DEFAULT_ADDR_FLAG_DB] [nvarchar](1) NULL,
										[ADDR_FLAG] [nvarchar](4000) NULL,
										[ADDR_FLAG_DB] [nvarchar](1) NULL,
										[AGREEMENT_ID] [nvarchar](10) NULL,
										[BACKORDER_OPTION] [nvarchar](4000) NULL,
										[BACKORDER_OPTION_DB] [nvarchar](40) NULL,
										[COUNTRY_CODE] [nvarchar](2) NULL,
										[CR_STOP] [nvarchar](4000) NULL,
										[CR_STOP_DB] [nvarchar](1) NULL,
										[CURRENCY_CODE] [nvarchar](3) NULL,
										[DELIVERY_LEADTIME] [numeric](3, 0) NULL,
										[DELIVERY_TERMS] [nvarchar](3) NULL,
										[DELIVERY_TERMS_DESC] [nvarchar](4000) NULL,
										[DEL_TERMS_LOCATION] [nvarchar](100) NULL,
										[DISTRICT_CODE] [nvarchar](10) NULL,
										[FORWARD_AGENT_ID] [nvarchar](20) NULL,
										[INTERNAL_DELIVERY_TYPE] [nvarchar](4000) NULL,
										[INTERNAL_DELIVERY_TYPE_DB] [nvarchar](10) NULL,
										[INTERNAL_PO_NO] [nvarchar](12) NULL,
										[LANGUAGE_CODE] [nvarchar](2) NULL,
										[MARKET_CODE] [nvarchar](10) NULL,
										[ORDER_CODE] [nvarchar](3) NULL,
										[ORDER_CONF] [nvarchar](4000) NULL,
										[ORDER_CONF_DB] [nvarchar](1) NULL,
										[ORDER_ID] [nvarchar](3) NULL,
										[PAY_TERM_ID] [nvarchar](20) NULL,
										[PRE_ACCOUNTING_ID] [numeric](38, 4) NULL,
										[PRICE_LIST_NO] [nvarchar](10) NULL,
										[REGION_CODE] [nvarchar](10) NULL,
										[ROUTE_ID] [nvarchar](12) NULL,
										[SALESMAN_CODE] [nvarchar](20) NULL,
										[SHIP_ADDR_NO] [nvarchar](50) NULL,
										[SHIP_VIA_CODE] [nvarchar](3) NULL,
										[SHIP_VIA_DESC] [nvarchar](4000) NULL,
										[WANTED_DELIVERY_DATE] [datetime] NULL,
										[VAT] [nvarchar](4000) NULL,
										[VAT_DB] [nvarchar](1) NULL,
										[CATALOG_NO] [nvarchar](25) NULL,
										[CATALOG_DESC] [nvarchar](200) NULL,
										[PURCHASE_PART_NO] [nvarchar](25) NULL,
										[CATALOG_TYPE] [nvarchar](4000) NULL,
										[CATALOG_TYPE_DB] [nvarchar](4) NULL,
										[BONUS_BASIS] [numeric](38, 4) NULL,
										[BONUS_VALUE] [numeric](38, 4) NULL,
										[BUY_QTY_DUE] [numeric](38, 4) NULL,
										[DESIRED_QTY] [numeric](38, 4) NULL,
										[BASE_SALE_UNIT_PRICE] [numeric](38, 4) NULL,
										[CONV_FACTOR] [numeric](38, 4) NULL,
										[COST] [numeric](38, 4) NULL,
										[CUSTOMER_PART_NO] [nvarchar](45) NULL,
										[CUSTOMER_PART_CONV_FACTOR] [numeric](38, 4) NULL,
										[CUSTOMER_PART_UNIT_MEAS] [nvarchar](10) NULL,
										[CUSTOMER_PART_BUY_QTY] [numeric](38, 4) NULL,
										[DATE_ENTERED] [datetime] NULL,
										[LINE_DELIVERY_TYPE] [nvarchar](20) NULL,
										[DISCOUNT] [numeric](38, 4) NULL,
										[VENDOR_NO] [nvarchar](20) NULL,
										[FEE_CODE] [nvarchar](20) NULL,
										[NOTE_TEXT] [nvarchar](2000) NULL,
										[ORDER_DISCOUNT] [numeric](38, 4) NULL,
										[CURRENCY_RATE] [numeric](38, 4) NULL,
										[PART_NO] [nvarchar](25) NULL,
										[CONFIGURATION_ID] [nvarchar](50) NULL,
										[CONFIGURED_LINE_PRICE_ID] [numeric](38, 4) NULL,
										[PLANNED_DELIVERY_DATE] [datetime] NULL,
										[PLANNED_DUE_DATE] [datetime] NULL,
										[SUPPLY_SITE_DUE_DATE] [datetime] NULL,
										[PROMISED_DELIVERY_DATE] [datetime] NULL,
										[LINE_PRE_ACCOUNTING_ID] [numeric](38, 4) NULL,
										[PRICE_CONV_FACTOR] [numeric](38, 4) NULL,
										[QTY_ASSIGNED] [numeric](38, 4) NULL,
										[QTY_INVOICED] [numeric](38, 4) NULL,
										[QTY_ON_ORDER] [numeric](38, 4) NULL,
										[QTY_PICKED] [numeric](38, 4) NULL,
										[QTY_RETURNED] [numeric](38, 4) NULL,
										[QTY_SHIPDIFF] [numeric](38, 4) NULL,
										[QTY_SHIPPED] [numeric](38, 4) NULL,
										[QTY_SHORT] [numeric](38, 4) NULL,
										[REAL_SHIP_DATE] [datetime] NULL,
										[QTY_TO_SHIP] [numeric](38, 4) NULL,
										[REVISED_QTY_DUE] [numeric](38, 4) NULL,
										[SALE_UNIT_PRICE] [numeric](38, 4) NULL,
										[SALES_UNIT_MEAS] [nvarchar](10) NULL,
										[SUPPLY_CODE] [nvarchar](4000) NULL,
										[SUPPLY_CODE_DB] [nvarchar](3) NULL,
										[PLANNED_SHIP_DATE] [datetime] NULL,
										[PLANNED_SHIP_PERIOD] [nvarchar](10) NULL,
										[LINE_TOTAL_QTY] [numeric](38, 4) NULL,
										[LINE_TOTAL_WEIGHT] [numeric](38, 4) NULL,
										[CONSIGNMENT_STOCK] [nvarchar](4000) NULL,
										[CONSIGNMENT_STOCK_DB] [nvarchar](20) NULL,
										[CLOSE_TOLERANCE] [numeric](38, 4) NULL,
										[CHARGED_ITEM] [nvarchar](4000) NULL,
										[CHARGED_ITEM_DB] [nvarchar](20) NULL,
										[DEMAND_ORDER_REF1] [nvarchar](12) NULL,
										[DEMAND_ORDER_REF2] [nvarchar](4) NULL,
										[DEMAND_ORDER_REF3] [nvarchar](4) NULL,
										[DEMAND_CODE] [nvarchar](4000) NULL,
										[DEMAND_CODE_DB] [nvarchar](20) NULL,
										[DOP_CONNECTION] [nvarchar](4000) NULL,
										[DOP_CONNECTION_DB] [nvarchar](3) NULL,
										[CREATE_SM_OBJECT_OPTION] [nvarchar](4000) NULL,
										[CREATE_SM_OBJECT_OPTION_DB] [nvarchar](20) NULL,
										[STAGED_BILLING_DB] [nvarchar](20) NULL,
										[ORIGINAL_PART_NO] [nvarchar](25) NULL,
										[SM_CONNECTION_DB] [nvarchar](20) NULL,
										[SUP_SM_CONTRACT] [nvarchar](5) NULL,
										[SUP_SM_OBJECT] [nvarchar](40) NULL,
										[PRIORITY] [numeric](38, 4) NULL,
										[INPUT_UNIT_MEAS] [nvarchar](30) NULL,
										[INPUT_QTY] [numeric](38, 4) NULL,
										[INPUT_CONV_FACTOR] [numeric](38, 4) NULL,
										[INPUT_VARIABLE_VALUES] [nvarchar](2000) NULL,
										[PART_PRICE] [numeric](38, 4) NULL,
										[CALC_CHAR_PRICE] [numeric](38, 4) NULL,
										[CHAR_PRICE] [numeric](38, 4) NULL,
										[PRICE_SOURCE] [nvarchar](4000) NULL,
										[PRICE_SOURCE_DB] [nvarchar](25) NULL,
										[PRICE_FREEZE] [nvarchar](4000) NULL,
										[PRICE_FREEZE_DB] [nvarchar](6) NULL,
										[DOCK_CODE] [nvarchar](35) NULL,
										[SUB_DOCK_CODE] [nvarchar](35) NULL,
										[REF_ID] [nvarchar](35) NULL,
										[LOCATION_NO] [nvarchar](35) NULL,
										[PRICE_EFFECTIVITY_DATE] [datetime] NULL,
										[LATEST_RELEASE_DATE] [datetime] NULL,
										[CTP_PLANNED_DB] [nvarchar](20) NULL,
										[CUST_WARRANTY_ID] [numeric](38, 4) NULL,
										[JOB_ID] [nvarchar](10) NULL,
										[PRICE_SOURCE_ID] [nvarchar](25) NULL,
										[CONDITION_CODE] [nvarchar](10) NULL,
										[ADDITIONAL_DISCOUNT] [numeric](38, 4) NULL,
										[PART_OWNERSHIP] [nvarchar](4000) NULL,
										[PART_OWNERSHIP_DB] [nvarchar](20) NULL,
										[OWNING_CUSTOMER_NO] [nvarchar](20) NULL,
										[EXCHANGE_ITEM] [nvarchar](4000) NULL,
										[EXCHANGE_ITEM_DB] [nvarchar](20) NULL,
										[SUPPLY_SITE_RESERVE_TYPE] [nvarchar](4000) NULL,
										[SUPPLY_SITE_RESERVE_TYPE_DB] [nvarchar](20) NULL,
										[ORIGINATING_REL_NO] [nvarchar](4) NULL,
										[ORIGINATING_LINE_ITEM_NO] [numeric](38, 4) NULL,
										[RELEASE_PLANNING] [nvarchar](4000) NULL,
										[RELEASE_PLANNING_DB] [nvarchar](20) NULL,
										[SUPPLIER_SHIP_VIA_TRANSIT] [nvarchar](3) NULL,
										[SUPPLIER_SHIP_VIA_TRANSIT_DESC] [nvarchar](35) NULL,
										[SUPPLY_SITE] [nvarchar](5) NULL,
										[REPLICATE_CHANGES] [nvarchar](100) NULL,
										[CHANGE_REQUEST] [nvarchar](100) NULL,
										[SHIPMENT_CONNECTED] [nvarchar](4000) NULL,
										[SHIPMENT_CONNECTED_DB] [nvarchar](5) NULL,
										[SELF_BILLING] [nvarchar](4000) NULL,
										[SELF_BILLING_DB] [nvarchar](20) NULL,
										[ACTIVITY_SEQ] [numeric](38, 4) NULL,
										[PROJECT_ID] [nvarchar](10) NULL,
										[DELIVER_TO_CUSTOMER_NO] [nvarchar](20) NULL,
										[SHIPMENT_CREATION] [nvarchar](4000) NULL,
										[SHIPMENT_CREATION_DB] [nvarchar](25) NULL,
										[CANCEL_REASON] [nvarchar](10) NULL,
										[CONFIRM_DELIVERIES] [nvarchar](4000) NULL,
										[CONFIRM_DELIVERIES_DB] [nvarchar](20) NULL,
										[CHECK_SALES_GRP_DELIV_CONF] [nvarchar](4000) NULL,
										[CHECK_SALES_GRP_DELIV_CONF_DB] [nvarchar](20) NULL,
										[DELAY_COGS_TO_DELIV_CONF] [nvarchar](4000) NULL,
										[DELAY_COGS_TO_DELIV_CONF_DB] [nvarchar](20) NULL,
										[DELIVERY_CONFIRMED] [nvarchar](4000) NULL,
										[DELIVERY_CONFIRMED_DB] [nvarchar](20) NULL,
										[QTY_CONFIRMEDDIFF] [numeric](38, 4) NULL,
										[PROVISIONAL_PRICE] [nvarchar](4000) NULL,
										[PROVISIONAL_PRICE_DB] [nvarchar](20) NULL,
										[CUSTOMER_PO_LINE_NO] [nvarchar](4) NULL,
										[CUSTOMER_PO_REL_NO] [nvarchar](4) NULL,
										[BLOCKED_FOR_INVOICING] [nvarchar](4000) NULL,
										[BLOCKED_FOR_INVOICING_DB] [nvarchar](20) NULL,
										[ADV_PAY_BLOCK] [nvarchar](4000) NULL,
										[ADV_PAY_BLOCK_DB] [nvarchar](20) NULL,
										[BLOCKED_REASON] [nvarchar](30) NULL,
										[SALES_CONTRACT_NO] [nvarchar](15) NULL,
										[CONTRACT_REV_SEQ] [numeric](38, 4) NULL,
										[CONTRACT_LINE_NO] [numeric](38, 4) NULL,
										[CONTRACT_ITEM_NO] [numeric](38, 4) NULL,
										[NOTE_ID] [numeric](10, 0) NULL,
										[LOAD_ID] [numeric](38, 4) NULL,
										[OBJID] [nvarchar](18) NULL,
										[OBJVERSION] [nvarchar](2000) NULL,
										[OBJSTATE] [nvarchar](20) NULL,
										[STATE] [nvarchar](4000) NULL,
										[LINE_OBJSTATE] [nvarchar](20) NULL,
										[LINE_STATE] [nvarchar](4000) NULL,
										[FIRST_ACTUAL_SHIP_DATE] [datetime] NULL,
										[PROPOSED_PREPAYMENT_AMOUNT] [numeric](38, 4) NULL,
										[PREPAYMENT_APPROVED] [nvarchar](4000) NULL,
										[PREPAYMENT_APPROVED_DB] [nvarchar](5) NULL,
										[USE_PRE_SHIP_DEL_NOTE_DB] [nvarchar](20) NULL,
										[VAT_NO] [nvarchar](50) NULL,
										[TEXT_ID$] [nvarchar](50) NULL,
										[DOP_NEW_QTY_DEMAND] [nvarchar](100) NULL,
										[TARGET_DATE] [datetime] NULL,
										[CUSTOMS_VALUE] [numeric](38, 4) NULL,
										[ABNORMAL_DEMAND_DB] [nvarchar](20) NULL,
										[INVERTED_CONV_FACTOR] [numeric](38, 4) NULL,
										[ORDER_LINE_ID] [nvarchar](100) NULL,
										[NET_AMOUNT_BASE] [numeric](12, 2) NULL,
										[REMOVED_FROM_SOURCE] [bit] NULL,
										[SITE_LOCAL_DATETIME] [datetime] NULL,
										[EXCEPTION_TYPE] [nvarchar](50) NULL
		        						
															
									)

                    INSERT INTO EXCEPTIONS
					SELECT  S.* , 'OPEN_BACKLOG_ON_INVOICED_ORDER'
					FROM  [dbo].[RAW_ORDER_LINE_SNAPSHOT] S
                    WHERE S.ORDER_NO= @PO
					ORDER BY LINE_NO, REL_NO, LINE_ITEM_NO, OBJVERSION, HISTORY_NO
								 
			end

	   ELSE
	        BEGIN       
                    INSERT INTO EXCEPTIONS
					SELECT  S.* , 'OPEN_BACKLOG_ON_INVOICED_ORDER'
					FROM  [dbo].[RAW_ORDER_LINE_SNAPSHOT] S
                    WHERE S.ORDER_NO= @PO
					ORDER BY LINE_NO, REL_NO, LINE_ITEM_NO, OBJVERSION, HISTORY_NO
            END
		
END

/*END OF EXCEPTION- 1 : EXCEPTION_TYPE='OPEN_BACKLOG_ON_INVOICED_ORDER'*/

/*BEGIN OF EXCEPTION- 2 : EXCEPTION_TYPE='GROSS_AMOUNT_IN_BASE IS NULL'  */
/*WHEN PAY_TAX IN FACT TABLE (OR VAT_DB IN SNAPSHOT TABLE) ='Y', TAX_PERCENTAGE IN TABLE OF CUST_ORDER_LINE_TAX_LINES_TAB IS NULL */

/*END OF EXCEPTION- 2 : EXCEPTION_TYPE='GROSS_AMOUNT_IN_BASE IS NULL' WHEN THE PAY_TAX OR VAT_DB ='Y' */

/*END OF Task4*/
*/
/***********************************************************************************************/
/***********************************************************************************************/
 

/***********************************************************************************************/

END


/* End of Backlog_Amount_SP_PO */

/***********************************************************************************************/
/***********************************************************************************************/
/***********************************************************************************************/
